%%
%% needs
%%    meta.ott
%%    fodtt_lnl-syntax.ott
%%    fodtt_lnl-flas.ott
%%

embed
{{ coq

(*
Definition fstSig (e : (con*Ty)+(tcon*nK) ) := match e with
    | inl (c, A) => inl c
    | inr (a, L) => inr a
  end.
*)

Definition boundnCon (c : con) (A : Ty) (S : sgn) :=
  exists S1, exists S2,
    (S = List.app S1 (List.cons (inl(c,A)) S2)) /\
    (forall A' , ~In (inl(c, A')) S1). 

Definition boundnTCon (a : tcon) (L : nK) (S : sgn) :=
  exists S1, exists S2,
    (S = List.app S1 (List.cons (inr(a,L)) S2)) /\
    (forall L', ~In (inr(a, L')) S1).

Definition indomnCon c S :=
  exists A,
    boundnCon c A S.

Definition indomnTCon a S :=
  exists L,
    boundnTCon a L S.

Definition boundsnCon (c : con) (tau : sTy) (S : ssgn) :=
  exists S1, exists S2,
    (S = List.app S1 (List.cons (inl(c,tau)) S2)) /\
    forall (tau' : sTy), ~In (inl(c, tau')) S1.

Definition boundsnTCon (a : tcon) (kappa : sK) (S : ssgn) :=
  exists S1, exists S2,
    (S = List.app S1 (List.cons (inr(a,kappa)) S2)) /\
    forall (kappa' : sK), ~In (inr(a,kappa')) S1.

Definition indomsnCon c S :=
  exists tau,
    boundsnCon c tau S.

Definition indomsnTCon a S :=
  exists kappa,
    boundsnTCon a kappa S.


}}
embed
{{ ocaml 
type ('a, 'b) sgn_el_type = Inl of 'a | Inr of 'b
}}

defns
JerasureTy :: '' ::=

  defn
  erasureTy( Ty ) sTy :: :: erasure_Ty_pred :: 'erasure_Ty_'
    {{ tex ( [[Ty]] )^- \equiv [[sTy]] }} by

  ----------------- :: tcon
  erasureTy( a ) a

  erasureTy( A ) tau
  ----------------------- :: pi_elim
  erasureTy( A M ) tau

  erasureTy( A ) tau1
  erasureTy( B ) tau2
  ----------------------------------------- :: pi_intro
  erasureTy( Pi A . B ) ( tau1 -> tau2 )

funs
FerasureTy ::=

  fun
  erasureTy( Ty ) :: sTy :: erasure_Ty 
    {{ tex ( [[Ty]] )^- }} by

  erasureTy( a ) === a
  erasureTy( A M ) === erasureTy( A )
  erasureTy( Pi A . B ) === erasureTy( A) -> erasureTy( B )


defns
JerasureK :: '' ::=

  defn
  erasureK( K ) sK :: :: erasure_K_pred :: 'erasure_K_'
    {{ tex ( [[K]] )^- \equiv [[sK]] }} by

  ------------------------ :: type
  erasureK( typeK ) typeK

  erasureTy(A) tau
  erasureK(L) kappa
  ------------------------------------ :: pi_intro
  erasureK( Pi A . L ) tau -> kappa 

funs
FerasureK ::=

  fun
  erasureK( K ) :: sK :: erasure_K
    {{ tex ( [[K]] )^- }} by

  erasureK( typeK ) === typeK
  erasureK( Pi A . L ) === erasureTy( A ) -> erasureK( L )

defns
Jerasuresgn :: '' ::=

  defn
  erasuresgn( sgn ) ( ssgn ) :: :: erasure_sgn_pred :: 'erasure_sgn_' 
    {{ tex ( [[sgn]] )^- \equiv [[ssgn]] }} by

  ------------------------------ :: empty
  erasuresgn( empty ) ( empty )

  erasuresgn(S) (ssgn)
  erasureK(L) kappa
  ----------------------------------------------- :: tcon
  erasuresgn( S , a : L ) (ssgn, a : kappa)

  erasuresgn(S) (ssgn)
  erasureTy(A) tau
  --------------------------------------------- :: con
  erasuresgn( S , c : A ) (ssgn, c : tau) 

funs
Ferasuresgn ::=

  fun 
  erasuresgn( sgn ) :: ssgn :: erasure_sgn
    {{ tex ( [[sgn]] )^- }} by

  erasuresgn( empty ) === empty 
  erasuresgn( S , a : L ) === erasuresgn( S ), a : erasureK( L)
  erasuresgn( S , c : A ) === erasuresgn( S ), c : erasureTy( A )

defns
Jerasurectx :: '' ::=

  defn
  erasurectx( ctx ) ( sctx ) :: :: erasure_nctx_pred :: 'erasure_nctx_'
    {{ tex ( [[ctx]] )^- \equiv [[sctx]] }} by

  ------------------------------ :: empty
  erasurectx( empty ) ( empty )

  erasurectx(G) (D)
  erasureTy(A) tau
  ------------------------------------- :: var
  erasurectx( G , A )  (D,tau)


funs
Ferasurectx ::=

  fun
  erasurectx( ctx ) :: sctx :: erasure_nctx
    {{ tex ( [[ctx]] )^- }} by

  erasurectx( empty ) === empty
  erasurectx( G , A )  === erasurectx( G ) , erasureTy( A )

defns
JShift :: 's_' ::= 

  defn 
  shiftTy eTy ix eTy' :: :: eTy :: 'Ty_'
  {{ tex {[[eTy]]}\uparrow^{[[ix]]} \; \equiv [[eTy']] }}
  {{ com one-\emph{shift} on types over a cut-off ix }} by
 
  -------------- :: tcon
  shiftTy a ix a

  shiftTy eA ix eA'
  shiftTy eB succ ix eB'
  -------------------------------------- :: pi_intro
  shiftTy (Pi eA . eB) ix (Pi eA' . eB')

  shiftTy eA ix eA'
  shiftte eM ix eM'
  ------------------------------ :: pi_elim
  shiftTy ( eA eM ) ix (eA' eM')

  defn
  shiftte ete ix ete' :: :: ete :: 'te_'
    {{ tex {[[ete]]}\uparrow^{[[ix]]} \; \equiv [[ete']] }}
    {{ com one-\emph{shift} on terms over a cut-off ix }} by
 
  -------------- :: con
  shiftte c ix c
  
  ------------------------ :: ix_zero
  shiftte ix zero ix

  ----------------------------- :: ix_pred
  shiftte zero succ ix' zero

  shiftte ix ix' (ix'') 
  ------------------------------------ :: ix_succ
  shiftte succ ix succ ix' (succ ix'')

  shiftTy eA ix eA'
  shiftte eM succ ix eM'
  ----------------------------- :: pi_intro
  shiftte (\ eA . eM) ix (\ eA' . eM') 

  shiftte eM ix eM'
  shiftte eN ix eN'
  ----------------------- :: pi_elim
  shiftte ( eM eN ) ix (eM' eN')

%defns
%Jshift_K :: '' ::=
%
%  defn
%  shiftK eK  eK' :: :: shift_eK :: 'shift_eK_' 
%    {{ tex {[[eK]]} \uparrow \equiv [[eK']] }}
%    {{ com \emph{shift} on kinds }} by
%
%  ----------------------- :: type
%  shiftK typeK typeK
%
%  shiftTy eA eA'
%  shiftK eL eL'
%  ----------------------------------- :: pi_intro
%  shiftK (Pi eA . eL) (Pi eA' . eL')

%defns
%ShiftCtx :: '' ::=
%
%  defn
%  csctx ( G ) ixc Ty ( G' ) :: :: cs_nctx :: 'cs_nctx_' 
%    {{ tex \overleftarrow{[[G]]} [ [[ixc]] / [[Ty]] ] \equiv [[G']] }}
%    {{ com \emph{shift} on cotexts }} by
%
%
%  ------------------------------------------ :: empty
%  csctx( empty ) zeroc B ( empty, B ) 
%
%  csctx( G ) zeroc A (G')
%  csTy B zeroc B'
%  ----------------------------------------- :: var_zeroc
%  csctx( G, A ) zeroc B (G', B')
%
%  csctx( G ) ixc B (G')
%  csTy A ixc A'
%  ------------------------------------------ :: var_succ
%  csctx( G, A ) succ ixc B (G', A')

funs
FShift ::=

  fun 
  shiftix( ix , ix' ) :: Ix :: shift_ix
    {{ tex [[ix]] \uparrow^{[[ix']]} }} by

    shiftix( ix , zero ) === succ ix
    shiftix( zero , succ ix ) === zero
    shiftix( succ ix , succ ix' ) === succ <shiftix(ix, ix')>

  fun 
  shiftte( te , ix ) :: M :: shift_te
    {{ tex [[te]] \uparrow^{[[ix]]} }} by

    shiftte( c , ix ) === c
    shiftte( ix , ix' ) === shiftix( ix , ix' )
    shiftte( \ A . M , ix) === \ shiftTy( A , ix ) . shiftte( M , succ ix)
    shiftte( M N , ix ) === shiftte( M , ix ) shiftte( N , ix )

  fun 
  shiftTy( Ty , ix ) :: A :: shift_Ty
    {{ tex [[Ty]] \uparrow^{[[ix]]} }} by

    shiftTy( a , ix ) === a
    shiftTy( Pi A . B , ix ) === Pi shiftTy( A , ix ) . shiftTy( B , succ ix)
    shiftTy( A M , ix ) === shiftTy( A , ix ) shiftte( M , ix )


defns
JSubst :: 'subst_' ::=

  defn
  substTy ( Ty , te ) Ty' :: :: Ty :: 'Ty_'
    {{ tex [[Ty]] [ [[te]] ]  \equiv [[Ty']] }} 
    {{ com \emph{substitute} on types }} by
 
  ------------------ :: tcon
  substTy( a , N ) a

  substTy (A , N) A'
  substTy (B , N) B'
  ---------------------------------------- :: pi_intro
  substTy( Pi A . B , N ) (Pi A' . B')

  substTy (A , N) A'
  substte (M , N) M'
  ------------------------------ :: pi_elim
  substTy( A M , N ) (A' M')

  defn
  substte ( te1 , te2 ) te'  :: :: te :: 'te_'
    {{ tex [[te1]] [ [[te2]] ]  \equiv [[te']] }} 
    {{ com \emph{substitute} on terms }} by

  ------------------- :: con
  substte ( c , N ) c
  
  ------------------------ :: ix_zero
  substte ( zero , N ) N

  --------------------------- :: ix_succ
  substte ( succ ix , N ) ix

  substTy (A , N) A'
  %shiftte N N'
  substte (M , shiftte( N , zero ) ) M'
  --------------------------------------- :: pi_intro
  substte ( (\ A . M) , N ) (\ A' . M')
   
  substte (M , N1) M'
  substte (N , N1) N'
  -------------------------------- :: pi_elim
  substte ( (M N) , N1 ) (M' N')

defns
JSubstK :: '' ::=

  defn
  substK ( K , te ) K' :: :: subst_K :: 'subst_K_'
    {{ tex [[K]] [ [[te]] ]  \equiv [[K']] }} 
    {{ com \emph{substitute} on kinds }} by

  ------------------------ :: type
  substK (typeK , N) typeK

  substTy (A , N) A'
  substK (L , N) L'
  -------------------------------------- :: pi_intro
  substK ((Pi A . L), N)  (Pi A' . L')


funs
FSubst ::=

  fun 
  substTy( Ty , ix , te ) :: A :: subst_Ty
    {{ tex [[Ty]] [ [[te]] ] }} by

    substTy( a , ix , N ) === a
    substTy( Pi A . B , ix , N ) === Pi substTy(A , ix , N) . substTy(B , succ ix , shiftte(N, zero)) 
    substTy( A M , ix , N ) === substTy(A , ix , N)  substte(M , ix , N) 

  fun
  substte( te , ix , te' ) :: M :: subst_te
    {{ tex [[te]] [ [[te']] ]  }} by

  substte( c , ix , N ) === c
  substte( ix , ix , N ) === N
  substte( succ ix , ix' , N ) === ix
  substte( (\ A . M) , ix , N ) === \ substTy(A , ix , N) . substte(M , succ ix , shiftte( N , zero) ) 
  substte( (M N) , ix , N1 ) === substte(M , ix , N1) substte(N , ix , N1) 

funs
FSubstK ::=

  fun 
  substK( K , ix , te ) :: L :: subst_K
    {{ tex [[K]] [ [[te]] ] }} by

    substK( typeK , ix , N ) === typeK
    substK( Pi A . L , ix , N ) === Pi substTy(A , ix , N) . substK(L , ix , N) 


defns
Jwelformednl_simple :: '' ::=

  defn
  |- ssgn :: :: wfssig_nl ::'snsig_nl_' {{ tex \vdash [[ssgn]] \text{ ssig} }} by

    ---------------  :: empty
    |- empty 

    |- ssgn 
    a notin dom(ssgn)
    ----------------------- :: tcon
    |- ssgn,a:kappa 

    |- ssgn 
    c notin dom(ssgn) 
    --------------------- :: con
    |- ssgn,c:tau 



defns
Jwhr :: '' ::=

  defn 
  M -whr-> M' ::  :: whr_nl_te :: 'whr_nl_te_' 
    {{ tex [[M]] \overset{\text{whr} }{\longrightarrow} [[M']] }} by
    
    substte (M , N) M'
    ---------------------- :: subst
    (\A.M) N -whr-> M'

    M -whr-> M'
    ------------------- :: head
    M N -whr-> M' N 

%defns
%JalgstreqB :: '' ::=
%
%  defn 
%  ssgn ; sctx ; mstralgeq |- M algeq N : tau ::  :: algeqB_nl_te :: 'algeqB_nl_te_' 
%    {{ tex [[ssgn]] ; [[sctx]] ; [[mstralgeq]] \vdash [[M]] \overset{\text{d.b.} }{\Leftrightarrow} [[N]] : [[tau]] }} by
%
%    M -whr-> M'
%    ssgn ; sctx ; d |- M' algeq N : a
%    ------------------------------------------ :: whr_l
%    ssgn ; sctx ; whr_l d |- M algeq N : a
%
%    N -whr-> N'
%    ssgn ; sctx ; d |- M algeq N' : a
%    -------------------------------------- :: whr_r
%    ssgn ; sctx ; whr_r d |- M algeq N : a
%
%    ssgn ; sctx ; d |- M streq N : a
%    -------------------------------------- :: streq
%    ssgn ; sctx ; str d |- M algeq N : a
%
%    cste M zeroc M'
%    cste N zeroc N'
%    ssgn ; sctx, tau1 ; d |- (M' zeroc) algeq (N' zeroc) : tau2
%    --------------------------------------------------------------- :: eta_exp
%    ssgn ; sctx ; eta_exp d |- M algeq N : tau1 -> tau2
%
%  defn 
%  ssgn ; sctx ; mstralgeq |- M streq N : tau ::  :: streqB_nl_te :: 'streqB_nl_te_' 
%    {{ tex [[ssgn]] ; [[sctx]] ; [[mstralgeq]] \vdash [[M]] \overset{\text{d.b.} }{\leftrightarrow} [[N]] : [[tau]] }} by
%
%    |- ssgn
%    ---------------------------------------------------- :: var_zero
%    ssgn ; sctx,tau ; zeroc |- zeroc streq zeroc : tau
%
%    |- ssgn
%    ssgn ; sctx ; d |- ixc streq ixc : tau
%    ------------------------------------------------------------ :: var_succ
%    ssgn ; sctx,tau' ; succ d |- succ ixc streq succ ixc : tau
%
%    |- ssgn
%    c : tau in ssgn
%    --------------------------------------------- :: con
%    ssgn ; sctx ; con |- c streq c : tau
%
%    ssgn ; sctx ; d1 |- M1 streq N1 : tau2 -> tau1
%    ssgn ; sctx ; d2 |- M2 algeq N2 : tau2
%    ------------------------------------------------------------- :: pi_elim
%    ssgn ; sctx ; pi_elim d1 d2 |- M1 M2 streq N1 N2 : tau1
%
defns
Jalgstreq :: '' ::=

%  defn 
%  ssgn ; sctx |- L algeq L' : kindS ::  :: algeq_nl_K :: 'algeq_nl_K_' 
%    {{tex [[ssgn]] ; [[sctx]] \vdash [[L]] \Leftrightarrow [[L']] : \text{kind}^-}} by
%
%    |- ssgn 
%    ------------------------------------------ :: type
%    ssgn ; sctx |- typeK algeq typeK : kindS
%
%    ssgn ; sctx |- A walgeq B : typeK
%    cstuK nK nK'
%    cstuK L L'
%    ssgn ; sctx , erasureTy(A) |- nK' algeq L' : kindS
%    --------------------------------------------- :: pi_intro
%    ssgn ; sctx |- Pi A.nK algeq Pi B.L : kindS 

  defn 
  ssgn ; D |- M algeq N : tau ::  :: algeq_nl_te :: 'algeq_nl_te_' 
    {{ tex [[ssgn]] ; [[D]] \vdash [[M]] \Leftrightarrow [[N]] : [[tau]] }} by

    M -whr-> M'
    ssgn ; D |- M' algeq N : a
    --------------------------------- :: whr_l
    ssgn ; D |- M algeq N : a

    N -whr-> N'
    ssgn ; D |- M algeq N' : a
    --------------------------------- :: whr_r
    ssgn ; D |- M algeq N : a

    ssgn ; D |- M streq N : a
    --------------------------------- :: streq
    ssgn ; D |- M algeq N : a

    %shiftte M M'
    %shiftte N N'
    ssgn ; D, tau1 |- (shiftte(M', zero)) zero algeq (shiftte(N' , zero)) zero : tau2
    ----------------------------------------------------------- :: eta_exp
    ssgn ; D |- M algeq N : tau1 -> tau2

  defn 
  ssgn ; D |- M streq N : tau ::  :: streq_nl_te :: 'streq_nl_te_' 
    {{ tex [[ssgn]] ; [[D]] \vdash [[M]] \leftrightarrow [[N]] : [[tau]] }} by

    |- ssgn
    -------------------------------------------- :: var_zero
    ssgn ; D,tau |- zero streq zero : tau

    |- ssgn
    ssgn ; D |- ix streq ix' : tau
    --------------------------------------------------- :: var_succ
    ssgn ; D,tau' |- succ ix streq succ ix' : tau

    |- ssgn
    c : tau in ssgn
    -------------------------------- :: con
    ssgn ; D |- c streq c : tau

    ssgn ; D |- M1 streq N1 : tau2 -> tau1
    ssgn ; D |- M2 algeq N2 : tau2
    ------------------------------------------ :: pi_elim
    ssgn ; D |- M1 M2 streq N1 N2 : tau1

defns
Jwalgeq :: '' ::=

  defn 
  ssgn ; D |- A walgeq A' : kappa ::  :: walgeq_nl_Ty :: 'walgeq_nl_Ty_'
      {{ tex [[ssgn]] ; [[D]] \vdash [[A]] \rightleftharpoons [[A']] : [[kappa]] }} by

    |- ssgn 
    a : kappa in ssgn
    ----------------------------------- :: refl
    ssgn ; D |- a walgeq a : kappa

    ssgn ; D |- A1 walgeq B1 : typeK
    %shiftTy A2 A2'
    %shiftTy B2 B2'
    ssgn ; D, erasureTy(A1) |- shiftTy(A2, zero) walgeq shiftTy(B2, zero) : typeK
    --------------------------------------------------------- :: pi_intro
    ssgn ; D |- (Pi A1.A2) walgeq (Pi B1.B2) : typeK

    ssgn ; D |- A walgeq B : tau -> kappa
    ssgn ; D |- M algeq N : tau
    ------------------------------------------- :: pi_elim
    ssgn ; D |- A M walgeq B N : kappa



defns
Jwellformednl_alg :: '' ::=


  defn
  |- sgn =>sgn :: :: wfsig_nl ::'sig_nl_'
  {{ tex \vdash [[sgn]] \Rightarrow \text{sig} }} by

    ---------------  :: empty
    |- empty =>sgn

    |- S =>sgn
    S ; empty |- L => kindS
    a notin dom(S)
    -------------------------- :: tcon
    |- S,a:L =>sgn

    |- S =>sgn
    S ; empty |- A => typeK
    c notin dom(S) 
    -------------------------- :: con
    |- S,c:A =>sgn

  defn
  sgn |- ctx =>ctx :: :: wfctx_nl ::'ctx_nl_'
  {{tex [[sgn]] \vdash [[ctx]] \Rightarrow \text{ctx} }} by
   
    |- S =>sgn
    --------------------  :: empty
    S |- empty =>ctx

    S |- G =>ctx
    S ; G |- A  => typeK
    ----------------------------- :: var
    S |- G,A =>ctx

  defn
  sgn ; ctx |- K => kindS :: :: wfkind_nl :: 'k_nl_'
  {{tex [[sgn]] ; [[ctx]] \vdash [[K]] \Rightarrow [[kindS]]}} by

    S |- G =>ctx
    -----------------------------  :: type
    S ; G |- typeK => kindS

    S ; G |- A => typeK
    S ; G,A |- L => kindS
    ---------------------------------------- :: pi_intro
    S ; G |- Pi A . L => kindS

  defn
  sgn ; ctx |- Ty => K  :: :: wftype_nl ::'ty_nl_'
  {{tex [[sgn]] ; [[ctx]] \vdash [[Ty]] \Rightarrow [[K]]}} by

    S |- G =>ctx
    a : L in S
    ---------------------  :: tcon
    S ; G |- a => L

    S ; G |- A => typeK
    S ; G, A |- B => typeK
    ---------------------------------- :: pi_intro
    S ; G |- Pi A . B => typeK 

    S ; G |- A => Pi B' . L
    S ; G |- M => B
    erasuresgn(S) ; erasurectx(G) |- B walgeq B' : typeK
    %substK (L , M) L'
    ------------------------------------------------------------ :: pi_elim
    S ; G |- A M => substK(L, zero , M)

  defn
  sgn ; ctx |- te => Ty  :: :: wfterm_nl ::'te_nl_'
    {{tex [[sgn]] ; [[ctx]] \vdash [[te]] \Rightarrow [[Ty]]}} by

    S |- G =>ctx
    c : A in S
    ----------------------  :: con
    S ; G |- c => A

    S |- G,A =>ctx
    ----------------------------  :: var_zero
    S ; G,A |- zero => A

    S ; G |- ix => A
    S |- G,B =>ctx
    ------------------------------------------------  :: var_succ
    S ; G,B |- succ ix => A'



    S ; G |- A => typeK
    S ; G, A |- M => B 
    ---------------------------------------------------------- :: pi_intro
    S ; G |- \A.M => Pi A . B

    S ; G |- M => Pi A . B
    S ; G |- N => A
    erasuresgn(S) ; erasurectx(G) |- A2 walgeq A2' : typeK
    %substTy(B , N) B'
    ------------------------------ :: pi_elim
    S ; G |- M N => substTy(B, zero , N)




