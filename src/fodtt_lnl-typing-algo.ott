%%
%% needs
%%    meta.ott
%%    fodtt_lnl-syntax.ott
%%    fodtt_lnl-flas.ott
%%

embed
{{ coq

(*
Definition fstSig (e : (con*nTy)+(tcon*nK) ) := match e with
    | inl (c, nA) => inl c
    | inr (a, nL) => inr a
  end.
*)

Definition boundnCon (c : con) (nA : nTy) (S : nsgn) :=
  exists S1, exists S2,
    (S = List.app S1 (List.cons (inl(c,nA)) S2)) /\
    (forall nA' , ~In (inl(c, nA')) S1). 

Definition boundnTCon (a : tcon) (nL : nK) (S : nsgn) :=
  exists S1, exists S2,
    (S = List.app S1 (List.cons (inr(a,nL)) S2)) /\
    (forall nL', ~In (inr(a, nL')) S1).

Definition indomnCon c S :=
  exists nA,
    boundnCon c nA S.

Definition indomnTCon a S :=
  exists nL,
    boundnTCon a nL S.

Definition boundsnCon (c : con) (tau : snTy) (S : snsgn) :=
  exists S1, exists S2,
    (S = List.app S1 (List.cons (inl(c,tau)) S2)) /\
    forall (tau' : snTy), ~In (inl(c, tau')) S1.

Definition boundsnTCon (a : tcon) (kappa : snK) (S : snsgn) :=
  exists S1, exists S2,
    (S = List.app S1 (List.cons (inr(a,kappa)) S2)) /\
    forall (kappa' : snK), ~In (inr(a,kappa')) S1.

Definition indomsnCon c S :=
  exists tau,
    boundsnCon c tau S.

Definition indomsnTCon a S :=
  exists kappa,
    boundsnTCon a kappa S.


}}
embed
{{ ocaml 
type ('a, 'b) sgn_el_type = Inl of 'a | Inr of 'b
}}

defns
FerasurenTy :: '' ::=

  defn
  erasurenTy( nA ) tau :: :: erasuresnTy :: 'erasure_nTy_'
    {{ tex ( [[nA]] )^- \equiv [[tau]] }} by

  ----------------- :: tcon
  erasurenTy( a ) a

  erasurenTy( nA ) tau
  ----------------------- :: pi_elim
  erasurenTy( nA nM ) tau

  erasurenTy(nA) tau1
  erasurenTy(nB) tau2
  ----------------------------------------- :: pi_intro
  erasurenTy( Pi nA . nB ) ( tau1 -> tau2 )

defns
FerasurenK :: '' ::=

  defn
  erasurenK( nL ) kappa :: :: erasuresnK :: 'erasure_nK_'
    {{ tex ( [[nL]] )^- \equiv [[kappa]] }} by

  ------------------------ :: type
  erasurenK( typeK ) typeK

  erasurenTy(nA) tau
  erasurenK(nL) kappa
  ------------------------------------ :: pi_intro
  erasurenK( Pi nA . nL ) tau -> kappa 

defns
Ferasurensgn :: '' ::=

  defn
  erasurensgn( nS ) ( snsgn ) :: :: erasuresnsgn :: 'erasure_nsgn_' 
    {{ tex ( [[nS]] )^- \equiv [[snsgn]] }} by

  ------------------------------ :: empty
  erasurensgn( empty ) ( empty )

  erasurensgn(nS) (snsgn)
  erasurenK(nL) kappa
  ----------------------------------------------- :: tcon
  erasurensgn( nS , a : nL ) (snsgn, a : kappa)

  erasurensgn(nS) (snsgn)
  erasurenTy(nA) tau
  --------------------------------------------- :: con
  erasurensgn( nS , c : nA ) (snsgn, c : tau) 

defns
Ferasurenctx :: '' ::=

  defn
  erasurenctx( nG ) ( nD ) :: :: erasuresnctx :: 'erasure_nctx_'
    {{ tex ( [[nG]] )^- \equiv [[nD]] }} by

  ------------------------------ :: empty
  erasurenctx( empty ) ( empty )

  erasurenctx(nG) (snctx)
  erasurenTy(nA) tau
  ------------------------------------- :: var
  erasurenctx( nG , nA )  (snctx,tau)

funs
Fstruct ::=

  fun
  structnTy( nTy ) :: sTy :: struct_nTy 
    {{ tex | [[nTy]] | }} by

  structnTy( a ) === Leaf
  structnTy( nA nM ) === structnTy( nA ) structnte( nM )
  structnTy( Pi nA . nB ) === Pi structnTy(nA) . structnTy(nB)
  structnTy( mA ) === Leaf

  fun
  structnte( nte ) :: ste :: struct_nte
    {{ tex | [[nte]] | }} by

  structnte( con ) === Leaf
  structnte( ixc ) === Leaf
  structnte( ixt ) === Leaf
  structnte( nM nN ) === structnte( nM ) structnte( nN )
  structnte( \ nA . nM ) === \ structnTy( nA ) . structnte( nM )
  structnte( mx ) === Leaf

funs
Fcsmstralgeq ::=

  fun
  csmstralgeq( d ) :: mstralgeq :: mstralgeq_cs
    {{ tex \overset{\leftarrow} {  [[d]]  } }} by

  csmstralgeq( whr_l mstralgeq )               === whr_l csmstralgeq( mstralgeq )
  csmstralgeq( whr_r mstralgeq )               === whr_r csmstralgeq( mstralgeq )
  csmstralgeq( str mstralgeq )                 === str csmstralgeq( mstralgeq )
  csmstralgeq( eta_exp mstralgeq )             === eta_exp csmstralgeq( mstralgeq )
  csmstralgeq( zeroc )                         === succ zeroc
  csmstralgeq( succ mstralgeq )                === succ csmstralgeq( mstralgeq )
  csmstralgeq( con )                           === con
  csmstralgeq( pi_elim mstralgeq1 mstralgeq2 ) === pi_elim csmstralgeq( mstralgeq1 ) csmstralgeq( mstralgeq2 )

defns
Shift :: 'cs_' ::=

  defn 
  csTy nTy ixc nTy' :: :: nTy :: 'nTy_'
  {{ tex \overleftarrow{[[nTy]]} [ [[ixc]] ]  \equiv [[nTy']] }}
  {{ com \emph{shift} on types }} by
 
  ------------ :: tcon
  csTy a ixc a

  csTy nA ixc nA'
  csTy nB ixc nB'
  ------------------------------------ :: pi_intro
  csTy (Pi nA . nB) ixc (Pi nA' . nB')

  csTy nA ixc nA'
  cste nM ixc nM'
  ---------------------------- :: pi_elim
  csTy ( nA nM ) ixc (nA' nM')

  defn
  cste nte ixc nte' :: :: nte :: 'nte_'
    {{ tex \overleftarrow{[[nte]]} [ [[ixc]] ] \equiv [[nte']] }}
    {{ com \emph{shift} on terms }} by
 
  ------------ :: con
  cste c ixc c
  
  ------------------------- :: ixc_gt
  cste ixc zeroc (succ ixc)

  ---------------------------- :: ixc_zeroc
  cste zeroc succ ixc' (zeroc)

  cste ixc ixc' ixc''
  ------------------------------------ :: ixc_succ
  cste succ ixc succ ixc' (succ ixc'')

  ---------------- :: ixt
  cste ixt ixc ixt

  csTy nA ixc nA'
  cste nM ixc nM'
  ---------------------------------- :: pi_intro
  cste (\ nA . nM) ixc (\ nA' . nM') 

  cste nM ixc nM'
  cste nN ixc nN'
  ---------------------------- :: pi_elim
  cste ( nM nN ) ixc (nM' nN')

%defns
%shift_K :: '' ::=
%
%  defn
%  csK ( nK ) ixc ( nK' ) :: :: cs_nK :: 'cs_nK_' 
%    {{ tex \overleftarrow{[[nK]]} [ [[ixc]] ] \equiv [[nK']] }}
%    {{ com \emph{shift} on kinds }} by
%
%  ----------------------- :: type
%  csK (typeK) ixc (typeK)
%
%  csTy nA ixc nA'
%  csK (nL) ixc (nL')
%  ----------------------------------- :: pi_intro
%  csK (Pi nA . nL) ixc (Pi nA' . nL')

defns
ShiftCtx :: '' ::=

  defn
  csctx ( nG ) ixc nTy ( nG' ) :: :: cs_nctx :: 'cs_nctx_' 
    {{ tex \overleftarrow{[[nG]]} [ [[ixc]] / [[nTy]] ] \equiv [[nG']] }}
    {{ com \emph{shift} on contexts }} by


  ------------------------------------------ :: empty
  csctx( empty ) zeroc nB ( empty, nB ) 

  csctx( nG ) zeroc nA (nG')
  csTy nB zeroc nB'
  ----------------------------------------- :: var_zeroc
  csctx( nG, nA ) zeroc nB (nG', nB')

  csctx( nG ) ixc nB (nG')
  csTy nA ixc nA'
  ------------------------------------------ :: var_succ
  csctx( nG, nA ) succ ixc nB (nG', nA')


defns
Unshift :: 'cu_' ::=

  defn
  cuTy nTy ixc nTy' :: :: Ty :: 'nTy_' 
    {{ tex \overrightarrow{[[nTy]]} [ [[ixc]] ] \equiv [[nTy']] }} 
    {{ com \emph{unshifting} on types }} by
 
  ------------ :: tcon
  cuTy a ixc a

  cuTy nA ixc nA'
  cuTy nB ixc nB'
  ------------------------------------- :: pi_intro
  cuTy( Pi nA . nB ) ixc (Pi nA' . nB')

  cuTy nA ixc nA'
  cute nM ixc nM'
  --------------------------- :: pi_elim
  cuTy( nA nM ) ixc (nA' nM')

  defn
  cute nte ixc nte' :: :: Te :: 'nte_'
    {{ tex \overrightarrow{[[nte]]} [ [[ixc]] ]  \equiv [[nte']] }} 
    {{ com \emph{unshifting} on terms }} by

  ------------ :: con
  cute c ixc c

  ------------------------ :: ixc_lt
  cute (succ ixc) zeroc ixc
 
  ------------------------- :: ixc_zeroc
  cute zeroc succ ixc zeroc
 

  cute (ixc) ixc' ixc''
  ------------------------------------ :: ixc_succ
  cute (succ ixc) succ ixc' succ ixc''

  ---------------- :: ixt
  cute ixt ixc ixt

  cuTy nA ixc nA'
  cute nM ixc nM'
  -------------------------------------- :: pi_intro
  cute ( \ nA . nM ) ixc ( \ nA' . nM' )

  cute nM ixc nM'
  cute nN ixc nN'
  ---------------------------- :: pi_elim
  cute ( nM nN ) ixc (nM' nN')

defns
UnshiftCtx :: '' ::=

  defn
  cuctx ( nG ) ixc ( nG' ) nTy ::  :: cu_nctx :: 'cu_nctx_'
    {{ tex \overrightarrow{[[nG]]} [ [[ixc]] ] \equiv [[nG']],[[nTy]] }} 
    {{ com \emph{unshifting} on contexts }} by

  ----------------------------------- :: empty
  cuctx ( empty,nB ) zeroc (empty) nB

  cuTy nB zeroc nB'
  cuctx (nG) zeroc (nG') nA
  --------------------------------------- ::  var_zeroc
  cuctx ( nG,nB ) zeroc ( nG',nA ) nB'

  cuctx ( nG ) ixc ( nG' ) nB
  cuTy nA ixc nA'
  ----------------------------------------- :: var_succ
  cuctx ( nG,nA ) succ ixc (nG',nA') nB

defns
ShiftOpen :: 'cstu_' ::=

  defn
  cstuTy nTy ixc nTy' :: :: nTy :: 'nTy_'
    {{ tex \overleftarrow{[[nTy]] [ [[ixc]] / 0_T ]  } \equiv [[nTy']] }} 
    {{ com \emph{shift}-\emph{open} on types }} by
 
  --------------- :: tcon
  cstuTy a ixc  a

  cstuTy nA ixc nA'
  cstuTy nB ixc nB'
  -------------------------------------- :: pi_intro
  cstuTy (Pi nA . nB) ixc (Pi nA' . nB')

  cstuTy nA ixc nA'
  cstute nM ixc nM'
  ------------------------------ :: pi_elim
  cstuTy ( nA nM ) ixc (nA' nM')

  defn
  cstute nte ixc nte'  :: :: nte :: 'nte_'
    {{ tex \overleftarrow{[[nte]] [ [[ixc]] / 0_T ]  } \equiv [[nte']] }} 
    {{ com \emph{shift}-\emph{close} on terms }} by
 
  -------------- :: con
  cstute c ixc c

  ------------------------- :: ixc
  cstute ixc' ixc (succ ixc')

  -------------------- :: zerot
  cstute zerot ixc ixc

  -------------------------- :: suct
  cstute (suct ixt) ixc  ixt

  cstuTy nA ixc nA'
  cstute nM ixc nM'
  ------------------------------------- :: pi_intro
  cstute (\ nA . nM) ixc (\ nA' . nM' )

  cstute nM ixc nM'
  cstute nN ixc nN'
  ----------------------------- :: pi_elim
  cstute ( nM nN ) ixc (nM' nN')

defns
ShiftOpenK :: '' ::=

  defn
  cstuK nK ixc nK' :: :: cstu_nK :: 'cstu_K_'
    {{ tex \overleftarrow{[[nK]]} [ [[ixc]] / 0_T ]  \equiv [[nK']] }} 
    {{ com \emph{shift}-\emph{open} on kinds }} by

  --------------------- :: type
  cstuK typeK ixc typeK

  cstuTy nA ixc nA'
  cstuK nL ixc nL'
  ------------------------------------ :: pi_intro
  cstuK (Pi nA . nL) ixc (Pi nA' . nL')

defns
UnshiftClose :: 'cuts_' ::=

  defn
  cutsTy nTy nTy' :: :: nTy :: 'nTy_'
    {{ tex \overleftarrow{[[nTy]]} [ 0_T / 0_\Gamma ]  \equiv [[nTy']] }} 
    {{ com \emph{unshift}-\emph{close} on types }} by
 
  ---------- :: tcon
  cutsTy a a

  cutsTy nA nA'
  cutsTy nB nB'
  ----------------------------------- :: pi_intro
  cutsTy (Pi nA . nB ) (Pi nA' . nB')

  cutsTy nA nA'
  cutste nM nM'
  ------------------------- :: pi_elim
  cutsTy (nA nM ) (nA' nM')

  defn
  cutste nte nte' :: :: nte :: 'nte_'
    {{ tex \overrightarrow{[[nte]]} [ 0_T / 0_\Gamma ] \equiv [[nte']] }} 
    {{ com \emph{unshift}-\emph{close} on terms }} by
 
  ---------- :: con
  cutste c c
  
  ----------------------- :: succ
  cutste ( succ ixc ) ixc

  ------------------ :: zeroc
  cutste zeroc zerot

  --------------------- :: ixt
  cutste ixt (suct ixt)

  cutsTy nA nA'
  cutste nM nM'
  ------------------------------------ :: pi_intro
  cutste ( \ nA . nM ) ( \ nA' . nM' )

  cutste nM nM'
  cutste nN nN'
  -------------------------- :: pi_elim
  cutste ( nM nN ) (nM' nN')

defns
OpenSubst :: 'tuts_' ::=

  defn
  tutsTy ( nTy , nte ) nTy' :: :: nTy :: 'nTy_'
    {{ tex [[nTy]] [  [[nte]] / 0_T ]  \equiv [[nTy']] }} 
    {{ com \emph{open}-\emph{substitute} on types }} by
 
  ------------------ :: tcon
  tutsTy( a , nN ) a

  tutsTy (nA , nN) nA'
  tutsTy (nB , nN) nB'
  ---------------------------------------- :: pi_intro
  tutsTy( Pi nA . nB , nN ) (Pi nA' . nB')

  tutsTy (nA , nN) nA'
  tutste (nM , nN) nM'
  ------------------------------ :: pi_elim
  tutsTy( nA nM , nN ) (nA' nM')

  defn
  tutste ( nte1 , nte2 ) nte'  :: :: nte :: 'nte_'
    {{ tex [[nte1]] [ [[nte2]] / 0_T ]  \equiv [[nte']] }} 
    {{ com \emph{open}-\emph{substitute} on terms }} by

  ------------------- :: con
  tutste ( c , nN ) c
  
  ----------------------- :: ixc
  tutste ( ixc , nN ) ixc

  ------------------------ :: ixt_zero
  tutste ( zerot , nN ) nN

  ---------------------------- :: ixt_succ
  tutste ( suct ixt , nN ) ixt

  tutsTy (nA , nN) nA'
  tutste (nM , nN) nM'
  --------------------------------------- :: pi_intro
  tutste ( \ nA . nM , nN ) (\ nA' . nM')
   
  tutste (nM , nN1) nM'
  tutste (nN , nN1) nN'
  -------------------------------- :: pi_elim
  tutste ( nM nN , nN1 ) (nM' nN')

defns
OpenSubstK :: '' ::=

  defn
  tutsK ( nK , nte ) nK' :: :: tuts_nK :: 'tuts_nK_'
    {{ tex [[nK]] [ [[nte]] / 0_T ]  \equiv [[nK']] }} 
    {{ com \emph{unshift}-\emph{substitute} on kinds }} by

  ------------------------ :: type
  tutsK (typeK , nN) typeK

  tutsTy (nA , nN) nA'
  tutsK (nL , nN) nL'
  -------------------------------------- :: pi_intro
  tutsK (Pi nA . nL, nN)  (Pi nA' . nL')


defns
Jwelformednl_simple :: '' ::=

  defn
  |- snsgn :: :: wfssig_nl ::'snsig_nl_' {{ tex _{n}\vdash [[snsgn]] \text{ ssig} }} by

    ---------------  :: empty
    |- empty 

    |- snsgn 
    a notin dom(snsgn)
    ----------------------- :: tcon
    |- snsgn,a:kappa 

    |- snsgn 
    c notin dom(snsgn) 
    --------------------- :: con
    |- snsgn,c:tau 



defns
Jwhr :: '' ::=

  defn 
  nM -whr-> nM' ::  :: whr_nl_te :: 'whr_nl_te_' 
    {{ tex [[nM]] \overset{\text{whr} }{\longrightarrow} [[nM']] }} by
    
    tutste (nM , nN) nM'
    ---------------------- :: subst
    (\nA.nM) nN -whr-> nM'

    nM -whr-> nM'
    ------------------- :: head
    nM nN -whr-> nM' nN 

defns
JalgstreqB :: '' ::=

  defn 
  snsgn ; snctx ; mstralgeq |- nM algeq nN : tau ::  :: algeqB_nl_te :: 'algeqB_nl_te_' 
    {{ tex [[snsgn]] ; [[snctx]] ; [[mstralgeq]] \vdash [[nM]] \overset{\text{d.b.} }{\Leftrightarrow} [[nN]] : [[tau]] }} by

    nM -whr-> nM'
    snsgn ; snctx ; d |- nM' algeq nN : a
    ------------------------------------------ :: whr_l
    snsgn ; snctx ; whr_l d |- nM algeq nN : a

    nN -whr-> nN'
    snsgn ; snctx ; d |- nM algeq nN' : a
    -------------------------------------- :: whr_r
    snsgn ; snctx ; whr_r d |- nM algeq nN : a

    snsgn ; snctx ; d |- nM streq nN : a
    -------------------------------------- :: streq
    snsgn ; snctx ; str d |- nM algeq nN : a

    cste nM zeroc nM'
    cste nN zeroc nN'
    snsgn ; snctx, tau1 ; d |- (nM' zeroc) algeq (nN' zeroc) : tau2
    --------------------------------------------------------------- :: eta_exp
    snsgn ; snctx ; eta_exp d |- nM algeq nN : tau1 -> tau2

  defn 
  snsgn ; snctx ; mstralgeq |- nM streq nN : tau ::  :: streqB_nl_te :: 'streqB_nl_te_' 
    {{ tex [[snsgn]] ; [[snctx]] ; [[mstralgeq]] \vdash [[nM]] \overset{\text{d.b.} }{\leftrightarrow} [[nN]] : [[tau]] }} by

    |- snsgn
    ---------------------------------------------------- :: var_zero
    snsgn ; snctx,tau ; zeroc |- zeroc streq zeroc : tau

    |- snsgn
    snsgn ; snctx ; d |- ixc streq ixc : tau
    ------------------------------------------------------------ :: var_succ
    snsgn ; snctx,tau' ; succ d |- succ ixc streq succ ixc : tau

    |- snsgn
    c : tau in snsgn
    --------------------------------------------- :: con
    snsgn ; snctx ; con |- c streq c : tau

    snsgn ; snctx ; d1 |- nM1 streq nN1 : tau2 -> tau1
    snsgn ; snctx ; d2 |- nM2 algeq nN2 : tau2
    ------------------------------------------------------------- :: pi_elim
    snsgn ; snctx ; pi_elim d1 d2 |- nM1 nM2 streq nN1 nN2 : tau1

defns
Jalgstreq :: '' ::=

%  defn 
%  snsgn ; snctx |- nL algeq nL' : kindS ::  :: algeq_nl_K :: 'algeq_nl_K_' 
%    {{tex [[snsgn]] ; [[snctx]] \vdash [[nL]] \Leftrightarrow [[nL']] : \text{kind}^-}} by
%
%    |- snsgn 
%    ------------------------------------------ :: type
%    snsgn ; snctx |- typeK algeq typeK : kindS
%
%    snsgn ; snctx |- nA walgeq nB : typeK
%    cstuK nK nK'
%    cstuK nL nL'
%    snsgn ; snctx , erasurenTy(nA) |- nK' algeq nL' : kindS
%    --------------------------------------------- :: pi_intro
%    snsgn ; snctx |- Pi nA.nK algeq Pi nB.nL : kindS 

  defn 
  snsgn ; nD |- nM algeq nN : tau ::  :: algeq_nl_te :: 'algeq_nl_te_' 
    {{ tex [[snsgn]] ; [[nD]] \vdash [[nM]] \Leftrightarrow [[nN]] : [[tau]] }} by

    nM -whr-> nM'
    snsgn ; nD |- nM' algeq nN : a
    --------------------------------- :: whr_l
    snsgn ; nD |- nM algeq nN : a

    nN -whr-> nN'
    snsgn ; nD |- nM algeq nN' : a
    --------------------------------- :: whr_r
    snsgn ; nD |- nM algeq nN : a

    snsgn ; nD |- nM streq nN : a
    --------------------------------- :: streq
    snsgn ; nD |- nM algeq nN : a

    cste nM zeroc nM'
    cste nN zeroc nN'
    snsgn ; nD, tau1 |- (nM' zeroc) algeq (nN' zeroc) : tau2
    ----------------------------------------------------------- :: eta_exp
    snsgn ; nD |- nM algeq nN : tau1 -> tau2

  defn 
  snsgn ; nD |- nM streq nN : tau ::  :: streq_nl_te :: 'streq_nl_te_' 
    {{ tex [[snsgn]] ; [[nD]] \vdash [[nM]] \leftrightarrow [[nN]] : [[tau]] }} by

    |- snsgn
    -------------------------------------------- :: var_zero
    snsgn ; nD,tau |- zeroc streq zeroc : tau

    |- snsgn
    snsgn ; nD |- ixc streq ixc' : tau
    --------------------------------------------------- :: var_succ
    snsgn ; nD,tau' |- succ ixc streq succ ixc' : tau

    |- snsgn
    c : tau in snsgn
    -------------------------------- :: con
    snsgn ; nD |- c streq c : tau

    snsgn ; nD |- nM1 streq nN1 : tau2 -> tau1
    snsgn ; nD |- nM2 algeq nN2 : tau2
    ------------------------------------------ :: pi_elim
    snsgn ; nD |- nM1 nM2 streq nN1 nN2 : tau1

defns
Jwalgeq :: '' ::=

  defn 
  snsgn ; nD |- nA walgeq nA' : kappa ::  :: walgeq_nl_Ty :: 'walgeq_nl_Ty_'
      {{ tex [[snsgn]] ; [[nD]] \vdash [[nA]] \rightleftharpoons [[nA']] : [[kappa]] }} by

    |- snsgn 
    a : kappa in snsgn
    ----------------------------------- :: refl
    snsgn ; nD |- a walgeq a : kappa

    snsgn ; nD |- nA1 walgeq nB1 : typeK
    cstuTy nA2 zeroc nA2'
    cstuTy nB2 zeroc nB2'
    erasurenTy(nA1) tau
    snsgn ; nD, tau |- nA2' walgeq nB2' : typeK
    --------------------------------------------------------- :: pi_intro
    snsgn ; nD |- (Pi nA1.nA2) walgeq (Pi nB1.nB2) : typeK

    snsgn ; nD |- nA walgeq nB : tau -> kappa
    snsgn ; nD |- nM algeq nN : tau
    ------------------------------------------- :: pi_elim
    snsgn ; nD |- nA nM walgeq nB nN : kappa



defns
Jwellformednl_alg :: '' ::=


  defn
  |- nS => sig :: :: wfsig_nl ::'sig_nl_'
  {{ tex \vdash [[nS]] \Rightarrow \text{sig} }} by

    ---------------  :: empty
    |- empty => sig

    |- nS => sig
    nS ; empty |- nL => kindS
    a notin dom(nS)
    -------------------------- :: tcon
    |- nS,a:nL => sig

    |- nS => sig
    nS ; empty |- nA => typeK
    c notin dom(nS) 
    -------------------------- :: con
    |- nS,c:nA => sig

  defn
  nS |- nG => ctx :: :: wfctx_nl ::'ctx_nl_'
  {{tex [[nS]] \vdash [[nG]] \Rightarrow \text{ctx} }} by
   
    |- nS => sig
    --------------------  :: empty
    nS |- empty => ctx

    cuctx (nG, nA) zeroc (nG') nA'
    nS |- nG' => ctx
    nS ; nG' |- nA'  => typeK
    ----------------------------- :: var
    nS |- nG,nA => ctx

  defn
  nS ; nG |- nK => kindS :: :: wfkind_nl :: 'k_nl_'
  {{tex [[nS]] ; [[nG]] \vdash [[nK]] \Rightarrow [[kindS]]}} by

    nS |- nG => ctx
    -----------------------------  :: type
    nS ; nG |- typeK => kindS

    nS ; nG |- nA => typeK
    csctx (nG) zeroc nA (nG')
    cstuK nL zeroc nL'
    nS ; nG' |- nL' => kindS
    ---------------------------------------- :: pi_intro
    nS ; nG |- Pi nA . nL => kindS

  defn
  nS ; nG |- nA => nK  :: :: wftype_nl ::'ty_nl_'
  {{tex [[nS]] ; [[nG]] \vdash [[nA]] \Rightarrow [[nK]]}} by

    nS |- nG => ctx
    a : nL in nS
    ---------------------  :: tcon
    nS ; nG |- a => nL

    nS ; nG |- nA => typeK
    csctx (nG) zeroc nA (nG')
    cstuTy nB zeroc nB'
    nS ; nG' |- nB' => typeK
    ---------------------------------- :: pi_intro
    nS ; nG |- Pi nA . nB => typeK 

    nS ; nG |- nA => Pi nB' . nL
    nS ; nG |- nM => nB
    erasurensgn(nS) (snsgn)
    erasurenctx(nG) (snctx)
    snsgn ; snctx |- nB walgeq nB' : typeK
    tutsK (nL , nM) nL'
    ------------------------------------------------------------ :: pi_elim
    nS ; nG |- nA nM => nL'

  defn
  nS ; nG |- nM => nA  :: :: wfterm_nl ::'te_nl_' {{tex [[nS]] ; [[nG]] \vdash [[nM]] \Rightarrow [[nA]]}} by

    nS |- nG => ctx
    c : nA in nS
    ----------------------  :: con
    nS ; nG |- c => nA

    nS |- nG,nA => ctx
    ----------------------------  :: var_zero
    nS ; nG,nA |- zeroc => nA

    cuctx (nG,nB) zeroc (nG') nB'
    nS ; nG' |- ixc => nA
    csTy nA zeroc nA'
    ------------------------------------------------  :: var_succ
    nS ; nG,nB |- succ ixc => nA'



    nS ; nG |- nA1 => typeK
    csctx (nG) zeroc nA1 (nG')
    cstute nM2 zeroc nM2'
    nS ; nG' |- nM2' => nA2 
    cutsTy nA2 nA2'
    ---------------------------------------------------------- :: pi_intro
    nS ; nG |- \nA1.nM2 => Pi nA1 . nA2'

    nS ; nG |- nM1 => Pi nA2' . nA1
    nS ; nG |- nM2 => nA2
    erasurensgn(nS) (snsgn)
    erasurenctx(nG) (snctx)
    snsgn ; snctx |- nA2 walgeq nA2' : typeK
    tutsTy(nA2 , nM2) nB
    ------------------------------ :: pi_elim
    nS ; nG |- nM1 nM2 => nB




