%%
%% needs
%%    fodtt-syntax.ott
%%    fodtt-flas_{n,both}.ott
%%

 

defns
Jgoal :: '' ::=


%  defn
%  |- nsgn :: :: goalsig_nl ::'sig_nl_' {{ tex _{n}\vdash [[nsgn]] \Rightarrow \text{sig} }} by
%
%    ---------------  :: empty
%    |- empty
%
%    |- nsgn
%    nsgn ; empty |- nL => kindS
%    a notin dom(nsgn)
%    -------------------------- :: tcon
%    |- nsgn,a:nL
%
%    |- nsgn
%    nsgn ; empty |- nA => typeK
%    c notin dom(nsgn) 
%    -------------------------- :: con
%    |- nsgn,c:nA
%
%  defn
%  nsgn |- nctx :: :: goalctx_nl ::'ctx_nl_' {{tex [[nsgn]] _{n}\vdash [[nctx]] \Rightarrow \text{ctx} }} by
%   
%    |- nsgn
%    --------------------  :: empty
%    nsgn |- empty
%
%    nsgn |- cuctx( nctx )
%    nsgn ; cuctx( nctx ) |- cuTy nA  => typeK
%    ------------------------------------------------------------ :: var
%    nsgn |- nctx,nA 
%
  defn
  nsgn ; nctx ; nK |- TTGoal ; kindS :: :: goalkind_nl :: 'g_nK_' 
    {{tex [[nsgn]] ; [[nctx]] ; [[nK]] \vdash ( [[TTGoal]] \mid [[kindS]] ) }} by

    ---------------------------------------  :: type
    nS ; nG ; typeK |- true ; kindS 

    nS ; nG ; nA |- G1 ; typeK
    nS ; nG , nA ; nL |- G1 ; kindS
    ----------------------------------------------- :: pi_intro
    nS ; nG ; Pi nA . nL |- G1 & G2  ; kindS

    -------------------------------------------------- :: mvar
    nS ; nG ; mL |- kind( mL , nG ) ; kindS

  defn
  nsgn ; nctx ; nTy |- TTGoal ; nK  :: :: goaltype_nl ::'g_nTy_' 
    {{tex [[nsgn]] ; [[nctx]] ; [[nTy]] \vdash ( [[TTGoal]] \mid [[nK]] ) }} by

    a : nL in nS
    ------------------------  :: tcon
    nS ; nG ; a |- true ; nL

    nS ; nG ; nA |- G1 ; typeK
    csctx (nG) zeroc nA (nG')
    cstuTy nB zeroc nB'
    nS ; nG' ; nB' |- G2 ; typeK
    ---------------------------------------- :: pi_intro
    nS ; nG ; Pi nA . nB |- G1 & G2 ; typeK 

    nS ; nG ; nA |- G1 ; nL
    nS ; nG ; nM |- G2 ; nB
    tutsK (nL, nM) nL'
    ----------------------------------------------------------------- :: pi_elim
    nS ; nG ; nA nM |- (G1 & G2) & eq_K( Pi nB . nL , mL , nG ) ; nL'

    -------------------------------------------------------- :: mvar
    nS ; nG ; mA |- G & type( mA , nG) ; mL
    
  defn
  nsgn ; nctx ; nte |- TTGoal ; nTy  :: :: goalterm_nl ::'g_nte_' 
  {{tex [[nsgn]] ; [[nctx]] ; [[nte]] \vdash ( [[TTGoal]] \mid [[nTy]] ) }} by

    c : nA in nS
    ---------------------  :: con
    nS ; nG ; c |- true ; nA

    --------------------------------------  :: var_nil
    nS ; nG, nA ; zeroc |- true ; nA 

    cuctx (nG,nB) zeroc (nG') nB'
    nS ; nG' ; ixc |- G ; nA'
    ------------------------------------------------------  :: var_cons
    nS ; nG,nB ; succ ixc |- G & cuTy(nA', zeroc, mA) ; mA

    csctx (nG) zeroc nA (nG')
    cstute nM zeroc nM'
    nS ; nG' ; nM' |- G ; nB 
    ------------------------------------------------------ :: pi_intro
    nS ; nG ; \nA.nM |- G & cutsTy( nB, nB') ; Pi nA . nB'

    nS ; nG ; nM |- G1 ; nA1 
    nS ; nG ; nN |- G2 ; nA2
    ---------------------------------------------------------------------------------- :: pi_elim
    nS ; nG ; nM nN |- ((G1 & G2) & eq_Ty(nA1 , Pi nA2 . nB , nG )) & tutsTy( nB, nN, nB') ; nB'
        
%    nsgn ; nctx |- nM => nA
%    nsgn ; nctx |- nA' => typeK
%    nsgn ; nctx |- nA is nA' 
%    ------------------------------ :: conv
%    nsgn ; nctx |- nM => nA' 

    -------------------------------------------- :: mvar
    nS ; nG ; mx |- mx : type(mA , nG)  ; mA

%  defn 
%  nsgn ; nctx |- TTGoal ::  :: goalctx_nl :: 'g_ctx_' {{tex [[nsgn]] ; [[nctx]] \vdash [[TTGoal]] }} by
%
%    --------------- :: empty
%    nS ; nG |- true
%
%    nS ; nG |- G1
%    nS ; nG ; nA |- G2 ; nL
%    ---------------------------------------------------------- :: var
%    nS ; nG,nA |- (G1 & G2) & eq_K(enL , typeK , enctx )

  defn 
  nsgn |- TTProg ::  :: prog_nl :: 'prog_nl_' 
    {{ tex [[nsgn]] \vdash_{Prog} [[TTProg]]  }} by

    --------------------------- :: empty
    empty |- empty

    nS |- TTProg
    ------------------------------------------------ :: con
    nS , c:nA |- TTProg , c : type( nA , empty) <-

    nS |- TTProg
    ------------------------------------------------ :: tcon
    nS , a:nL |- TTProg , a : kind( nL , empty) <-
%
%    nsgn ; nctx |- nA_1 is nA_2 
%    nsgn ; nctx |- nA_2 is nA_3 
%    ------------------------------- :: trans
%    nsgn ; nctx |- nA_1 is nA_3 
%
%    nsgn ; nctx |- nA is nA' 
%    nsgn ; nctx |- nB is nB' 
%    ------------------------------------ :: 1
%    nsgn ; nctx |- Pi nA.nB is Pi nA'.nB' 
%
%    nsgn ; nctx |- nA is nA' 
%    nsgn ; nctx |- nM is nM' 
%    ------------------------------------ :: 2
%    nsgn ; nctx |- nA nM is nA' nM' 
%
%  defn 
%  nsgn ; nctx |- nM is nM' ::  :: goalsubstapterm_nl :: 'eqt_nl_' {{ tex [[nsgn]] ; [[nctx]] \vdash [[nM]] \equiv [[nM']] }} by
%
%    ----------------------- :: refl
%    nsgn ; nctx |- nM is nM 
%
%    nsgn ; nctx |- nM' is nM 
%    ------------------------ :: sym
%    nsgn ; nctx |- nM is nM' 
%
%    nsgn ; nctx |- nM_1 is nM_2 
%    nsgn ; nctx |- nM_2 is nM_3 
%    --------------------------- :: trans
%    nsgn ; nctx |- nM_1 is nM_3 
%
%    nsgn ; csctx( nctx,nA ) |- nM is nM' 
%    nsgn ; nctx |- nN is nN' 
%    --------------------------------------- :: 1
%    nsgn ; nctx |- (\nA.nM)nN is tutste(nM' , nN') 
%
%    nsgn ; nctx |- nM is nM' 
%    nsgn ; nctx |- nN is nN' 
%    --------------------------------------- :: 2
%    nsgn ; nctx |- nM nN is nM' nN' 
%
%    nsgn ; nctx |- nA is nA' 
%    nsgn ; nctx |- nM is nM' 
%    ------------------------------------------ :: 3
%    nsgn ; nctx |- \nA.nM is \nA'.nM' 
%
%
%
