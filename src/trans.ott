%funs
%pdec ::=
%  
%  fun
%  pdec( hct1 ) :: hct :: pdec {{ tex \downarrow [[hct1]] }} by
%
%  pdec( mtvar ) === mtvar
%  pdec( mkvar ) === mkvar
%  pdec( tcon ) === tcon
%  pdec( con ) === con
%  pdec( zeroc ) === succ(zeroc)
%  pdec( succ(hct1) ) === succ(succ(hct1))
%  pdec( zerop ) === zeroc
%  pdec( sucp(hct1) ) === hct1
%  pdec( typeK ) === typeK
%  pdec( Pi_Kind(hct1,hct2,hct3) ) === Pi_Kind( pdec(hct1) , pdec(hct2) , hct3 )
%  pdec( Pi_Type(hct1,hct2,hct3) ) === Pi_Type( pdec(hct1) , pdec(hct2) , hct3 )
%  pdec( nil ) === nil
%  pdec( cons(hct1,hct2) ) === cons(hct1,hct2)
%  pdec( ap(hct1,hct2) ) === ap(pdec(hct1), pdec(hct2))
%
%
%defns
%Jwftrans :: 'wftr_' ::=
%
%  defn
%  transl( eK ;  ectx ) = hct :: :: eK :: 'eK_' {{ tex \ulcorner [[eK]] ; [[ectx]] \urcorner = [[hct]]  }} by
%
%    ----------------------------- :: typeK
%    transl( typeK ; ectx) = typeK
%
%    transl( C ; ectx ) = u
%    transl( eL ; ectx , x : C ) = v
%    transl( ectx ) = w
%    ------------------------------------------------ :: pi_intro
%    transl( Pi x : C . eL ; ectx) = Pi_Kind(u, pdec(v), w)
%
%  defn
%  transl( eTy ;  ectx ) = hct :: :: eTy :: 'eTy_' {{ tex \ulcorner [[eTy]] ; [[ectx]] \urcorner = [[hct]]  }} by
%
%    ------------------------------ :: tcon
%    transl( alpha ; ectx ) = alpha
%
%    transl( C ; ectx) = u
%    transl( P ; ectx) = v
%    ------------------------------ :: pi_elim
%    transl( C P ; ectx ) = ap(u,v)
%
%    transl( C ; ectx ) = u
%    transl( D ; ectx , x : C) = v
%    transl( ectx ) = w
%    ---------------------------------------------------- :: pi_intro
%    transl( Pi x : C . D ; ectx ) = Pi_Type( u , pdec(v) , w )
%
%  defn
%  transl( ete ;  ectx ) = hct :: :: ete :: 'ete_' {{ tex \ulcorner [[ete]] ; [[ectx]] \urcorner = [[hct]]  }} by
%
%    --------------------------------- :: cbd_zero
%    transl( x ; ectx , x : C) = zeroc
%
%    transl( x ; ectx , y : C) = u
%    ----------------------------------- :: cbd_succ
%    transl( x ; ectx , y : C) = succ(u)
%
%
%    ---------------------- :: con
%    transl( c ; ectx ) = c
%
%    transl(P ; ectx) = u
%    transl(Q ; ectx) = v
%    ----------------------------- :: pi_elim
%    transl( P Q ; ectx) = ap(u,v)
%
%    transl(C ; ectx) = u
%    transl(P ; ectx,x:C) = v
%    transl(ectx) = w
%    --------------------------------------------- :: pi_intro
%    transl( \ x : C . P ; ectx ) = Pi_Type(u,pdec(v),w)
%
%
%%defns
%%Jwftransctx :: 'wftr_' ::=
%
%  defn
%  transl( ectx ) = hct :: :: ectx :: 'ectx_' {{ tex \ulcorner [[ectx]] \urcorner = [[hct]]  }} by
%
%    --------------------- :: empty
%    transl( empty ) = nil
%
%    transl( C ; ectx ) = u
%    transl( ectx ) = v
%    --------------------------------- :: var
%    transl( ectx, x : C) = cons(u, v)
%
%
defns
Jref :: 'r_' ::=

  defn
  sgn ; ectx ; eK |- ( Go | kindS ) :: :: eK :: 'eK_'
    {{ tex [[sgn]] ; [[ectx]] ; [[eK]] \vdash ( [[Go]] \mid [[kindS]] ) }} by

    --------------------------------- :: type
    S ; eG ; typeK |- (true | kindS )

    S ; eG ; eA |- (Go1 | typeK)
    S ; eG, eA ; eL |- (Go2 | kindS)
    --------------------------------------------- :: pi_intro
    S ; eG ; Pi eA . eL |- ( Go1 & Go2 | kindS )

  defn
  sgn ; ectx ; eTy |- ( Go | eK ) :: :: eTy ::'eTy_'
    {{ tex [[sgn]] ; [[ectx]] ; [[eTy]] \vdash ( [[Go]] \mid [[eK]] ) }} by

    alpha : L in S
    --------------------------------- :: tcon
    S ; eG ; alpha |- (true | L )

    S ; eG ; eA |- ( Go1 | eL )
    S ; eG ; eM |- ( Go2 | eB )
    ------------------------------------------- :: pi_elim
    S ; eG ; eA eM |- ( ((Go1 & Go2) & eq_K( eL , Pi eB . mL' , eG ) ) & substK( mL' , eM , mL ) | mL )
    
    S ; eG ; eA |- ( Go1 | eL1 )
    S ; eG , eA ; eB |- ( Go2 | eL2)
    ------------------------------------------------ :: pi_intro
    S ; eG ; Pi eA . eB |- ( ((Go1 & Go2) & eq_K( eL1, typeK, eG)) & eq_K(eL2, typeK, eG) | typeK )
    
    ---------------------------------------- :: mtvar
    S ; eG ; mA |- ( type( mA , mL , eG ) | mL )

  defn
  S ; eG ; ete |- ( Go | eTy ) :: :: ete ::'ete_'
    {{ tex [[S]] ; [[eG]] ; [[ete]] \vdash ( [[Go]] \mid [[eTy]] ) }} by

    c : A in S
    ---------------------------- :: con 
    S ; eG ; c |- ( true | A)

    ----------------------------------- :: var_zero
    S ; eG,A ; zero |- ( true | A )

    S ; eG ; ix |- ( Go | eA )
    --------------------------------------- :: var_succ
    S ; eG, eB ; succ ix |- ( Go & shiftTy(eA, mA) | mA )

    S ; eG ; M |- ( Go1 | A )
    S ; eG ; N |- ( Go2 | B )
    ---------------------------------- :: pi_elim
    S ; eG ; M N |- (( (Go1 & Go2) & eq_Ty(A, Pi B . mA , eG) ) & substTy(mA, N, mB) | mB )
    
    S ; eG ; eA |- ( Go1 | L )
    S ; eG, eA ; eM |- ( Go2 | eB )
    ----------------------------------------------------- :: pi_intro
    S ; eG ; \ eA . eM |- ( (Go1 & Go2) & eq_K(L, typeK, eG) | Pi eA . eB )


    --------------------------------------------------- :: mvar
    S ; eG ; mM |- ( mM : term( mM, mA, eG) | mA )

%defns
%Jrefsgn :: 'r_sgn_' ::=
%
%  defn
%  sgn |- Prog :: :: Prog :: '' {{ tex [[sgn]] \vdash [[Prog]] }} by
%
%    -------------------------- :: empty
%    empty |- kappa_true : true , kappa_zeroc : type(mX, cons(mX, mY)) , kappa_succ : type(mX, mZ) -> type(mX, cons(mY, mZ))
%
%    sgn |- </ Kappai : HCi // i /> 
%    transl(K; empty) = u
%    ----------------------------------------------------------------------------------------- :: kind
%    sgn, alpha : K |- </ Kappai : HCi // i /> , kappa_tcon alpha : kind( u , mX )
%
%    sgn |- </ Kappai : HCi // i /> 
%    transl(A; empty) = u
%    ----------------------------------------------------------------------------- :: type
%    sgn, c : A |- </ Kappai : HCi // i /> , kappa_con c : type( u , mX )
%
%defns
%Jlp :: 'lp_' ::=
%
%  defn
%  Prog |- Pt : Goal :: :: Prog :: ''  by
%  
%  %( Prog |- Pt1 : Goal1 .. Ptn : Goaln ) :: :: Prog :: ''  by
%  %{{ tex [[Prog]] \vdash [[Pt1]] : [[Goal1]] \dots [[PTn]] : [[Goaln]] }} by
%
%
%    Kappa : At1 .. Atn -> At in Prog
%    Prog |- t1 : At1 .. Prog |- tn : Atn 
%    ---------------------------- :: hc
%    Prog |- Kappa t1 .. tn : At
%
%
%
%
