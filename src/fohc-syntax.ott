%grammar
%hct, u, v, w :: 'hcterm_' ::= {{ com terms of fohc }}
%    | mtvar                         ::   :: mtvar {{ com type-level metavariable }}
%    | mkvar                         ::   :: mkvar {{ com kind-level metavariable }}
%    | tcon                          ::   :: tcon {{ com type constants of fodtt }}
%    | con                           ::   :: con {{ com constants of fodtt }}
%    | zero                          ::   :: zero
%    | succ( u )                     ::   :: succ
%    | typeK      ::   :: type
%%    | Pi_Type
%    | Pi_Kind( u , v ) ::   :: pi_k
%    | Pi_Type( u , v ) ::   :: pi_t
%    | nil                           ::   :: nil
%    | cons( hct1 , hct2 )           ::   :: cons
%    | ap( hct1 , hct2 )             ::   :: ap
%
%At :: 'atom_' ::= {{ com atoms of fohc }}
%   | true                ::   :: true
%   | kind( u , v ) ::   :: kind
%   | type( u , v , w ) ::   :: type
%   | term( u , v , w ) ::   :: term
%   | eq_te( u , v , w , w' )   ::   :: eqte
%   | eq_Ty( u , v , w , w' )   ::   :: eqTy
%
%
%
%Goal, Go   :: 'goal_' ::= {{ com goal }}
%  | At        ::   :: uatom {{ com atomic goal }}
%  | mvar : At ::   :: batom {{ com atomic goal with binding of a proof term }}
%  | Go1 & Go2   ::   :: conj {{ com conjunction of goals }}
%  | ( Go )     :: S :: paren 
%    {{ coq ([[Go]]) }}
%
%
%Kappa {{ tex \kappa }} :: 'kappa_' ::= {{ com proof-term symbols embeding }}
%  | kappa_con con    ::   :: con {{ tex \kappa_{[[con]]} }}
%  | kappa_tcon tcon  ::   :: tcon {{ tex \kappa_{[[tcon]]} }}
%  | kappa_succ       ::   :: succ
%  | kappa_zeroc      ::   :: zeroc
%%  | kappa_sucp       ::   :: sucp
%%  | kappa_zerop      ::   :: zerop
%  | kappa_true       ::   :: true {{ tex \kappa_\top }}
%
%Pt, s, t :: 'pt_' ::= {{ com proof-term }}
%  | Kappa        ::   :: head
%  | t s          ::   :: pt
%  | ( t )        :: S :: paren
%  {{ coq ( [[t]] ) }}
%
%HC :: 'hc_' ::= {{ com Horn Clause }}
%  | At           ::   :: empty
%  | At -> HC     ::   :: body
%
%Prog :: 'prog_' ::= {{ com logic program }}
%%  | empty             ::   :: empty {{ com empty program }}
%%  | Prog , Kappa : HC ::   :: cons  
%   | Kappa1 : HC1 , .. , Kappan : HCn :: :: prog
%
%%substitutions:
%%    multiple hct mkvar :: substhct
%
%

grammar
TTPt {{ tex \text{Proof term} }} , TTe :: 'ttpt_' ::= {{ com proof term in TT }}
  | true                         ::   :: true
  | axType                       ::   :: axType
  | axCon con                    ::   :: axCon
  | axTCon tcon                  ::   :: axTCon
  | axShiftC                     ::   :: axShiftC
  | axSubstC                     ::   :: axSubstC
  | axEqCon                      ::   :: axEqCon
  | axEqTCon                     ::   :: axEqTCon

grammar
TTAtom {{ tex \text{Atom} }} , TTAt :: 'ttat_' ::= {{ com atom in TT }}
  | true                         ::   :: true
  | eq_te  ete1 ete2 eTy ectx    ::   :: eq_te {{ tex [[ete1]] \equiv_{[[ectx]]}^{[[eTy]]} [[ete2]] }}
  | eq_Ty  eTy1 eTy2 eK ectx     ::   :: eq_Ty {{ tex [[eTy1]] \equiv_{[[ectx]]}^{[[eK]]} [[eTy2]] }}
  | eq_K  eL1   eL2 ectx         ::   :: eq_K  {{ tex [[eL1]] \equiv_{[[ectx]]} [[eL2]] }}
%  | kind( K , ctx )            ::   :: K
  | typeP eTy eK ectx            ::   :: Ty
  | termP ete eTy ectx           ::   :: te
  | shiftK eL1 ix eL2            ::   :: shiftK {{ tex [[eL1]] \uparrow^[[ix]] \equiv \; [[eL2]] }}
  | substK eL1 eM eL2            ::   :: substK {{ tex [[eL1]] [ [[eM]] ] \equiv [[eL2]] }}
  | shiftTy eA1 ix eA2           ::   :: shiftTy {{ tex [[eA1]] \uparrow^[[ix]] \equiv \; [[eA2]] }}
  | substTy eA1 eM eA2           ::   :: substTy {{ tex [[eA1]] [ [[eM]] ]\equiv [[eA2]] }}
  | shiftte eM1 ix eM2           ::   :: shiftte {{ tex [[eM1]] \uparrow^[[ix]] \equiv \; [[eM2]] }}
  | substte eM1 eN eM2           ::   :: substte {{ tex [[eM1]] [ [[eN]] ]\equiv [[eM2]] }}

grammar
TTGoal {{ tex \text{Goal} }} , Go {{ tex G }}  :: 'ttgoal_' ::= {{ com goal in TT }}
  | TTGoal1 & TTGoal2              ::   :: conj
  | ( TTGoal )                     :: M :: paren {{tex [[TTGoal]] }}
    {{ coq ( [[TTGoal]] ) }}
    {{ ocaml ( [[TTGoal]] ) }}
  | lnvar : TTAtom                  ::   :: bound_at
  | TTAtom                         ::   :: unbound_at

grammar
TTProg {{ tex \text{Prog} }} , TTP {{ tex \mathcal{P} }}  :: 'ttprog_' ::= {{ com program in TT }}
  | empty                                   ::   :: empty
  | TTProg , TTAtom :- TTAtom1 .. TTAtomk . ::   :: hc_con
  | TTProg , TTPt : TTAtom .                ::   :: hc_nob


