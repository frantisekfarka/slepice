%%
%% needs
%%    fodtt-syntax.ott
%%    fodtt-flas_{n,both}.ott
%%

embed
{{ coq

Definition fstSig (e : (con*eTy)+(tcon*eK) ) := match e with
    | inl (c, ty) => inl c
    | inr (alpha, k) => inr alpha
  end.

Definition boundCon c T0 S :=
  exists S1, exists S2,
    (S = List.app S1 (List.cons (inl(c,T0)) S2)) /\
    ~In (inl(c)) (List.map (fstSig) S1).

Definition boundTCon alpha T0 S :=
  exists S1, exists S2,
    (S = List.app S1 (List.cons (inr(alpha,T0)) S2)) /\
    ~In (inr(alpha)) (List.map (fstSig) S1).

Definition boundVar x T0 G :=
  exists G1, exists G2,
    (G = List.app G1 (List.cons (x,T0) G2)) /\
    ~In x (List.map (@fst var eTy) G1).

Definition indomCon c S :=
  exists T0,
    boundCon c T0 S.

Definition indomTCon alpha S :=
  exists T0,
    boundCon alpha T0 S.

Definition indomVar x S :=
  exists T0,
    boundVar x T0 S.

}}
embed
{{ ocaml 
type ('a, 'b) sgn_el_type = Inl of 'a | Inr of 'b
}}


subrules

freevars
% due to recursive definition of Ty and K the fv_Ty and fk_K are also generated
%  Ty x :: tyfv
%  te x :: fv

substitutions
%  single K x :: tsubst
%  single Ty x :: tsubst
%  single te x :: subst

funs
Cshifting ::=

  fun
  csTy nA  :: nTy :: cshifting_Ty {{ com C-shifting on types }} by
 
  csTy a  === a
  csTy Pi nA . nB  === Pi csTy nA  .  csTy nB 
  csTy ( nA nM ) === (csTy nA) (cste nM)

  fun
  cste nM  :: nte :: cshifting_te {{ com C-shifting on terms }} by
 
  cste c  === c
  cste ixc  === succ ixc
  cste ixt  === ixt
  cste \ nA . nM === \ csTy( nA ) . cste( nM )
  cste ( nM1 nM2 ) === (cste nM1 ) (cste nM2 )

funs
Cshiftingctx ::=

  fun
  csctx( nctx' ) :: nctx :: s_ctx {{ com C-shift on contexts }} by

  csctx( empty ) === empty
  csctx( nctx,nA ) === csctx(nctx ) , csTy nA 

funs
Cunshifting ::=

  fun
  cuTy nA  :: nTy :: cunshifting_Ty {{ com C-unshifting on types }} by
 
  cuTy( a ) === a
  cuTy( Pi nA . nB ) === Pi cuTy nA  .  cuTy nB 
  cuTy( nA nM ) === (cuTy nA) (cute nM)

  fun
  cute nM  :: nte :: cunshifting_te {{ com C-unshifting on terms }} by
 
  cute( c ) === c
  cute( succ ixc ) === ixc
  cute( ixt ) === ixt
  cute( \ nA . nM ) === \ cuTy( nA ) . cute( nM )
  cute( nM1 nM2 ) === (cute nM1 ) (cute nM2 )

funs
Cunshiftingctx ::=

  fun
  cuctx( nctx' ) :: nctx :: u_ctx {{ com C-shift on contexts }} by

  cuctx( empty ) === empty
  cuctx( nctx,nA ) === cuctx(nctx ) , cuTy nA 

funs
CshiftingTunshifting ::=

  fun
  cstuTy nA  :: nTy :: cstuing_Ty {{ com C-shifting T-unshifting on types }} by
 
  cstuTy a  === a
  cstuTy Pi nA . nB  === Pi cstuTy nA  .  cstuTy nB 
  cstuTy ( nA nM ) === (cstuTy nA) (cstute nM)

  fun
  cstute nM  :: nte :: cstuing_te {{ com C-shifting T-unshifting on terms }} by
 
  cstute c  === c
  cstute ixc  === succ ixc
  cstute zerot  === zeroc
  cstute suct ixt  === ixt
  cstute \ nA . nM === \ cstuTy( nA ) . cstute( nM )
  cstute ( nM1 nM2 ) === (cstute nM1 ) (cstute nM2 )

funs
CshiftingTunshiftingK ::=

  fun
  cstuK nL  :: nK :: cstuing_K {{ com C-shifting T-unshifting on kinds }} by
 
  cstuK typeK  === typeK
  cstuK Pi nA . nL  === Pi cstuTy nA  .  cstuK nL 

funs
CunshiftingTshifting ::=

  fun
  cutsTy nA  :: nTy :: cutshifting_Ty {{ com C-unshifting T-shifting on types }} by
 
  cutsTy( a ) === a
  cutsTy( Pi nA . nB ) === Pi cutsTy nA  .  cutsTy nB 
  cutsTy( nA nM ) === (cutsTy nA) (cutste nM)

  fun
  cutste nM  :: nte :: cutshifting_te {{ com C-unshifting T-shifting on terms }} by
 
  cutste( c ) === c
  cutste( succ ixc ) === ixc
  cutste( zeroc ) === zerot
  cutste( ixt ) === suct ixt
  cutste( \ nA . nM ) === \ cutsTy( nA ) . cutste( nM )
  cutste( nM1 nM2 ) === (cutste nM1 ) (cutste nM2 )

%funs
%CunshiftingTshiftingK ::=
%
%  fun
%  cutsK nL :: nK :: cutsing_K {{ tex \overrightarrow{ [[nL]] }^{0_T \leftarrow 0_\Gamma}  }} {{ com C-shift T-unshift on kinds }} by
%
%  cutsK typeK === typeK
%  cutsK (Pi nA . nL)  === Pi cutsTy nA . cutsK nL

funs
TunshiftingTsubst ::=

  fun
  tutsTy( nA , nN )  :: nTy :: tutsing_Ty {{ com T-unshifting T-substitution on types }} by
 
  tutsTy( a , nN ) === a
  tutsTy( Pi nA . nB , nN ) === Pi tutsTy( nA , nN) .  tutsTy( nB , nN)
  tutsTy( nA nM , nN ) === tutsTy( nA , nN ) tutste( nM , nN)

  fun
  tutste( nM , nN )  :: nte :: tutsing_te {{ com T-unshifting T-substitution on terms }} by
 
  tutste( c , nN ) === c
  tutste( ixc , nN ) === ixc
  tutste( zerot , nN ) === nN
  tutste( suct ixt , nN ) === ixt
  tutste( \ nA . nM , nN ) === \ tutsTy( nA , nN ) . tutste( nM , nN )
  tutste( nM1 nM2 , nN ) === tutste( nM1 , nN ) tutste( nM2 , nN )

funs
TunshiftingTsubstK ::=

  fun
  tutsK( nL , nN ) :: nK :: tutsing_K {{ com T-unshifting T-substitution on kinds }} by

  tutsK(typeK , nN) === typeK
  tutsK(Pi nA . nL, nN)  === Pi tutsTy( nA , nN) . tutsK( nL , nN)



 

defns
Jwellformednl :: '' ::=


  defn
  |- nsgn :: :: wfsig_nl ::'sig_nl_' {{ tex _{n}\vdash [[nsgn]] \Rightarrow \text{sig} }} by

    ---------------  :: empty
    |- empty

    |- nsgn
    nsgn ; empty |- nL => kindS
    a notin dom(nsgn)
    -------------------------- :: tcon
    |- nsgn,a:nL

    |- nsgn
    nsgn ; empty |- nA => typeK
    c notin dom(nsgn) 
    -------------------------- :: con
    |- nsgn,c:nA

  defn
  nsgn |- nctx :: :: wfctx_nl ::'ctx_nl_' {{tex [[nsgn]] _{n}\vdash [[nctx]] \Rightarrow \text{ctx} }} by
   
    |- nsgn
    --------------------  :: empty
    nsgn |- empty

    nsgn |- cuctx( nctx )
    nsgn ; cuctx( nctx ) |- cuTy nA  => typeK
    ------------------------------------------------------------ :: var
    nsgn |- nctx,nA 

  defn
  nsgn ; nctx |- nK => kindS :: :: wfkind_nl :: 'k_n_' {{tex [[nsgn]] ; [[nctx]] \vdash [[nK]] \Rightarrow [[kindS]]}} by

    nsgn |- nctx 
    -----------------------------  :: type
    nsgn ; nctx |- typeK => kindS

    nsgn ; csctx(nctx,nA ) |- cstuK nL => kindS
    ---------------------------------------- :: pi_intro
    nsgn ; nctx |- Pi nA . nL => kindS

  defn
  nsgn ; nctx |- nA => nK  :: :: wftype_nl ::'ty_nl_' {{tex [[nsgn]] ; [[nctx]] _{n}\vdash [[nA]] \Rightarrow [[nK]]}} by

    nsgn |- nctx
    a : nL in nsgn
    ---------------------  :: tcon
    nsgn ; nctx |- a => nL


    nsgn ; csctx(nctx,nA) |- cstuTy nB => typeK
    ----------------------------------------- :: pi_intro
    nsgn ; nctx |- Pi nA . nB => typeK 

    nsgn ; nctx |- nA => Pi nB . nL
    nsgn ; nctx |- nM => nB
    ------------------------------------------------------- :: pi_elim
    nsgn ; nctx |- nA nM => tutsK(nL , nM) 

  defn
  nsgn ; nctx |- nM => nA  :: :: wfterm_nl ::'te_nl_' {{tex [[nsgn]] ; [[nctx]] \vdash [[nM]] \Rightarrow [[nA]]}} by

    nsgn |- nctx
    c : nA in nsgn
    ----------------------  :: con
    nsgn ; nctx |- c => nA

    nsgn |- nctx,nA
    ----------------------------  :: var_nil
    nsgn ; nctx,nA |- zeroc => nA

    nsgn ; cuctx(nctx) |- ixc => nA
    ------------------------------------------------  :: var_cons
    nsgn ; nctx,nB |- succ ixc => cuTy nA 

    nsgn ; csctx(nctx,nA) |- cstute nM => nB 
    ---------------------------------------------------------- :: pi_intro
    nsgn ; nctx |- \nA.nM => Pi nA . cutsTy nB 

    nsgn ; nctx |- nM => Pi nA . nB 
    nsgn ; nctx |- nN => nA
    ------------------------------ :: pi_elim
    nsgn ; nctx |- nM nN => tutsTy(nB , nN)

    nsgn ; nctx |- nM => nA
    nsgn ; nctx |- nA' => typeK
    nsgn ; nctx |- nA is nA' 
    ------------------------------ :: conv
    nsgn ; nctx |- nM => nA' 

  defn 
  nsgn ; nctx |- nL is nL' ::  :: substapkind_nl :: 'eqnK_' {{tex [[nsgn]] ; [[nctx]] \vdash [[nL]] \equiv [[nL']] }} by

    --------------------------- :: refl
    nsgn ; nctx |- nL is nL 

    nsgn ; nctx |- nL' is nL 
    ---------------------------- :: sym
    nsgn ; nctx |- nL is nL' 

    nsgn ; nctx |- nL_1 is nL_2
    nsgn ; nctx |- nL_2 is nL_3
    ------------------------------- :: trans
    nsgn ; nctx |- nL_1 is nL_3

    nsgn ; nctx |- nA is nA' 
    nsgn ; nctx |- nL is nL' 
    ------------------------------------ :: 1
    nsgn ; nctx |- Pi nA.nL is Pi nA'.nL' 

  defn 
  nsgn ; nctx |- nA is nA' ::  :: substaptype_nl :: 'eqnT_' {{ tex [[nsgn]] ; [[nctx]] \vdash [[nA]] \equiv [[nA']] }} by

    %nsgn ; nctx |- nA 
    --------------------------- :: refl
    nsgn ; nctx |- nA is nA 

    nsgn ; nctx |- nA' is nA 
    ---------------------------- :: sym
    nsgn ; nctx |- nA is nA' 

    nsgn ; nctx |- nA_1 is nA_2 
    nsgn ; nctx |- nA_2 is nA_3 
    ------------------------------- :: trans
    nsgn ; nctx |- nA_1 is nA_3 

    nsgn ; nctx |- nA is nA' 
    nsgn ; nctx |- nB is nB' 
    ------------------------------------ :: 1
    nsgn ; nctx |- Pi nA.nB is Pi nA'.nB' 

    nsgn ; nctx |- nA is nA' 
    nsgn ; nctx |- nM is nM' 
    ------------------------------------ :: 2
    nsgn ; nctx |- nA nM is nA' nM' 

  defn 
  nsgn ; nctx |- nM is nM' ::  :: substapterm_nl :: 'eqt_nl_' {{ tex [[nsgn]] ; [[nctx]] \vdash [[nM]] \equiv [[nM']] }} by

    ----------------------- :: refl
    nsgn ; nctx |- nM is nM 

    nsgn ; nctx |- nM' is nM 
    ------------------------ :: sym
    nsgn ; nctx |- nM is nM' 

    nsgn ; nctx |- nM_1 is nM_2 
    nsgn ; nctx |- nM_2 is nM_3 
    --------------------------- :: trans
    nsgn ; nctx |- nM_1 is nM_3 

    nsgn ; csctx( nctx,nA ) |- nM is nM' 
    nsgn ; nctx |- nN is nN' 
    --------------------------------------- :: 1
    nsgn ; nctx |- (\nA.nM)nN is tutste(nM' , nN') 

    nsgn ; nctx |- nM is nM' 
    nsgn ; nctx |- nN is nN' 
    --------------------------------------- :: 2
    nsgn ; nctx |- nM nN is nM' nN' 

    nsgn ; nctx |- nA is nA' 
    nsgn ; nctx |- nM is nM' 
    ------------------------------------------ :: 3
    nsgn ; nctx |- \nA.nM is \nA'.nM' 



