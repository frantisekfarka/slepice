grammar

Ixc {{tex I_\Gamma{} }}, ixc {{tex \iota_\Gamma }} :: 'ixctx_' ::= {{com deBruijn indices for context }}
  {{ coq nat }}
  | zeroc                ::   :: zero  
  {{ coq 0 }}
  | succ Ixc             ::   :: succ
  {{ coq (S [[Ixc]]) }}

Ixt {{tex I_T }}, ixt {{tex \iota_T }} :: 'ixTy_' ::= {{com deBruijn indices for types formers }}
  {{ coq nat }}
  | zerot                ::   :: zero  
  {{ coq 0 }}
  | suct Ixt             ::   :: succ
  {{ coq (S [[Ixt]]) }}

grammar
nK {{ tex K }} , nL {{ tex L }} :: 'kindstar_nl_' ::= {{ com Extended Locally Nameless Kinds }}
  | typeK                ::   :: type                {{ com kind of all types }} 
  | Pi nTy . nK          ::   :: pi_intro            {{ com kind of dependent functions }}
  | ( nK )               :: S :: paren                        
     {{ coq [[nK]] }}
  | mkvar                 ::   :: mkvar               {{ com kind level metavariables }}

nTy {{ tex T }}, nA {{ tex A }}, nB {{ tex B }} :: 'typestar_nl_' ::= {{ com Extended Locally Nameless Types }}
  | tcon                  ::   :: tcon                {{ com type constant }}
  | Pi nTy1 . nTy2      ::   :: pi_intro            {{ com type of dependente functions }}
  | nTy nte             ::   :: pi_elim             {{ com application of a type former }}
  | ( nTy )              :: S :: paren                        
     {{ coq [[nTy]] }}
     {{ ocaml ([[nTy]]) }}
  | mtvar                 ::   :: mtvar               {{ com type level metavariables }}

nte {{ tex t }}, nM {{ tex M }}, nN {{ tex N }} :: 'termstar_nl_' ::= {{ com Extended Locally Nameless Terms }}
  | con                   ::   :: con                 {{ com term constant }} 
  | ixc                   ::   :: ixc                 {{ com indices left of $\vdash$ (context) }} 
  | ixt                   ::   :: ixt                 {{ com indices right of $\vdash$ ($\Pi$ and $\Sigma$ types) }} 
  | \ nTy . nte         ::   :: pi_intro            {{ com formation of $\Pi$ type }}
  | nte1 nte2           ::   :: pi_elim             {{ com application }}
  | ( nte )              :: S :: paren                        
     {{ coq [[nte]] }}
     {{ ocaml ([[nte]]) }}
  | mvar                 ::   :: mvar               {{ com term level metavariables }}

nsgn {{tex Sig }}, nS {{ tex \mathcal{S} }} :: 'signaturestar_nl_' ::= {{ com Extended Locally Nameless Signature }}
    {{ coq list (con*nTy+tcon*nK) }}
%    {{ ocaml ((con * ty , tcon*k) sgn_el_type)  list }}
  | empty                 ::   :: empty               {{ com empty signature }}
     {{ coq nil }}
  | nsgn , con : nTy    ::   :: con
     {{ coq (cons (inl([[con]],[[nTy]])) [[nsgn]]) }}
  | nsgn , tcon : nK    ::   :: tcon
     {{ coq (cons (inr([[tcon]],[[nK]])) [[nsgn]]) }}

nctx {{tex Ctx }}, nG {{ tex \Gamma }} :: 'contextstar_nl_' ::= {{ com Extended Locally Nameless Context }}
    {{ coq list (nTy) }}
  | empty                 ::   :: empty              {{ com empty context }}
     {{ coq nil }}
  | nctx , nTy          ::   :: ctxvar
     {{ coq (cons [[nTy]] [[nctx]]) }}
%  | csctx( nctx )           :: M :: cshifting
%     {{ tex \overleftarrow{ [[enctx]] } }} 
%     {{ coq ??TODO }}
%  | cuctx( enctx )           :: M :: cunshifting
%     {{ tex \overrightarrow{ [[enctx]] }  }} 
%     {{ coq ??TODO }}

grammar
snTy {{ tex T^{-}{} }}, tau {{ tex \tau }} :: 'stype_nl_' ::= {{ com Simple Types }}
  | tcon                 ::   :: tcon                {{ com type constant }}
  | snTy1 -> snTy2       ::   :: pi_intro            {{ com type of functions }}
  | ( snTy )             :: S :: paren                        
     {{ coq [[snTy]] }}

grammar
snK {{ tex K^{-}{} }} , kappa {{ tex \kappa }} :: 'skind_nl_' ::= {{ com Simple Kinds }}
  | typeK                ::   :: type                {{ com kind of all types }} 
  | snTy -> snK          ::   :: pi_intro            {{ com kind of functions }}
  | ( snK )              :: S :: paren                        
     {{ coq [[snK]] }}

snsgn {{ tex \mathcal{S}^{-}{} }} :: 'ssignature_nl_' ::= {{ com Simple Signature }}
    {{ coq list (con*snTy+tcon*snK) }}
%    {{ ocaml ((con * ty , tcon*k) sgn_el_type)  list }}
  | empty                 ::   :: empty               {{ com empty signature }}
     {{ coq nil }}
  | snsgn , con : snTy    ::   :: con
     {{ coq (cons (inl([[con]],[[snTy]])) [[snsgn]]) }}
  | snsgn , tcon : snK    ::   :: tcon
     {{ coq (cons (inr([[tcon]],[[snK]])) [[snsgn]]) }}

snctx {{ tex Ctx^{-} }} , nD {{ tex \Delta^{}{} }} :: 'scontext_nl_' ::= {{ com Simple Context }}
    {{ coq list (snTy) }}
  | empty                 ::   :: empty              {{ com empty context }}
     {{ coq nil }}
  | snctx , snTy          ::   :: ctxvar
     {{ coq (cons [[snTy]] [[snctx]]) }}


