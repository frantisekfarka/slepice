%%
%% needs
%%    fodtt-syntax.ott
%%    fodtt-flas_{n,both}.ott
%%

defns
Jrefin :: 'r_' ::=

%  defn
%  sgn ; ectx ; eK |- TTGoal ; kindS :: :: goalkind_nl :: 'g_K_' 
%    {{tex [[sgn]] ; [[ectx]] ; [[eK]] \vdash ( [[TTGoal]] \mid [[kindS]] ) }} by
%
%    ---------------------------------------  :: type
%    S ; eG ; typeK |- true ; kindS 
%
%    S ; eG ; eA |- Go1 ; typeK
%    S ; eG , eA ; eL |- Go2 ; kindS
%    ----------------------------------------------- :: pi_intro
%    S ; eG ; Pi eA . eL |- Go1 & Go2 ; kindS
%
%    %-------------------------------------------------- :: mvar
%    %S ; eG ; mL |- kind( mL , eG ) ; kindS

  defn
  sgn ; ectx ; eTy |- TTGoal ; eK  :: :: goaltype_nl ::'g_Ty_' 
    {{tex [[sgn]] ; [[ectx]] ; [[eTy]] \vdash ( [[TTGoal]] \mid [[eK]] ) }} by

    a : L in S
    ------------------------  :: tcon
    S ; eG ; a |- true ; L

    S ; eG ; eA |- Go1 ; eL1
    S ; eG ; eB |- Go2 ; eL2
    ----------------------------------------------------- :: pi_intro
    S ; eG ; Pi eA . eB |- ((Go1 & Go2) & eq_K( eL1, typeK, eG)) & eq_K(eL2, typeK, eG) ; typeK 

    % fresh mL mL'
    S ; eG ; eA |- Go1 ; eL
    S ; eG ; eM |- Go2 ; eB
    ----------------------------------------------------------------- :: pi_elim
    S ; eG ; eA eM |- ((Go1 & Go2) & eq_K( Pi eB . eL , mL' , eG )) & substK( mL', eM, mL) ; mL

   
    % fresh mL
    -------------------------------------------------------- :: mvar
    S ; eG ; mA |- Go & type( mA , mL, eG) ; mL
    
  defn
  sgn ; ectx ; ete |- TTGoal ; eTy  :: :: goalterm_nl ::'g_te_' 
  {{tex [[sgn]] ; [[ectx]] ; [[ete]] \vdash ( [[TTGoal]] \mid [[eTy]] ) }} by

    c : A in S
    -----------------------  :: con
    S ; eG ; c |- true ; eA

    % mA fresh
    ---------------------------------------------------  :: var_nil
    S ; eG, eA ; zero |- shiftTy( eA , zero , mA ) ; mA

    S ; eG ; ix |- Go ; eA
    % mA fresh
    ------------------------------------------------------  :: var_cons
    S ; eG,eB ; succ ix |- Go & shiftTy(eA, zero, mA) ; mA

    S ; eG ; eA |- Go1 ; eL 
    S ; eG ; eM |- Go2 ; eB 
    ----------------------------------------------------------------- :: pi_intro
    S ; eG ; \eA.eM |- (Go1 & Go2) & eq_K(eL, typeK, eG); Pi eA . eB

    S ; eG ; eM |- Go1 ; eA 
    S ; eG ; eN |- Go2 ; eA1
    % fresh mB
    ---------------------------------------------------------------------------------- :: pi_elim
    S ; eG ; eM eN |- ((Go1 & Go2) & eq_Ty(eA , Pi eA1 . eB' , eG )) & substTy(eB' , eN , mB) ; mB
    
    % fresh mA
    -------------------------------------------- :: mvar
    S ; eG ; mN |- mN : term(mN, mA , eG)  ; mA

%  defn 
%  nsgn ; nctx |- TTGoal ::  :: goalctx_nl :: 'g_ctx_' {{tex [[nsgn]] ; [[nctx]] \vdash [[TTGoal]] }} by
%
%    --------------- :: empty
%    nS ; nG |- true
%
%    nS ; nG |- G1
%    nS ; nG ; nA |- G2 ; nL
%    ---------------------------------------------------------- :: var
%    nS ; nG,nA |- (G1 & G2) & eq_K(enL , typeK , enctx )

%  defn 
%  nsgn |- TTProg ::  :: prog_nl :: 'prog_nl_' 
%    {{ tex [[nsgn]] \vdash_{Prog} [[TTProg]]  }} by
%
%    --------------------------- :: empty
%    empty |- empty
%
%    nS |- TTProg
%    ------------------------------------------------ :: con
%    nS , c:nA |- TTProg , c : type( nA , empty) <-
%
%    nS |- TTProg
%    ------------------------------------------------ :: tcon
%    nS , a:nL |- TTProg , a : kind( nL , empty) <-
%
%    nsgn ; nctx |- nA_1 is nA_2 
%    nsgn ; nctx |- nA_2 is nA_3 
%    ------------------------------- :: trans
%    nsgn ; nctx |- nA_1 is nA_3 
%
%    nsgn ; nctx |- nA is nA' 
%    nsgn ; nctx |- nB is nB' 
%    ------------------------------------ :: 1
%    nsgn ; nctx |- Pi nA.nB is Pi nA'.nB' 
%
%    nsgn ; nctx |- nA is nA' 
%    nsgn ; nctx |- nM is nM' 
%    ------------------------------------ :: 2
%    nsgn ; nctx |- nA nM is nA' nM' 
%
%  defn 
%  nsgn ; nctx |- nM is nM' ::  :: goalsubstapterm_nl :: 'eqt_nl_' {{ tex [[nsgn]] ; [[nctx]] \vdash [[nM]] \equiv [[nM']] }} by
%
%    ----------------------- :: refl
%    nsgn ; nctx |- nM is nM 
%
%    nsgn ; nctx |- nM' is nM 
%    ------------------------ :: sym
%    nsgn ; nctx |- nM is nM' 
%
%    nsgn ; nctx |- nM_1 is nM_2 
%    nsgn ; nctx |- nM_2 is nM_3 
%    --------------------------- :: trans
%    nsgn ; nctx |- nM_1 is nM_3 
%
%    nsgn ; csctx( nctx,nA ) |- nM is nM' 
%    nsgn ; nctx |- nN is nN' 
%    --------------------------------------- :: 1
%    nsgn ; nctx |- (\nA.nM)nN is tutste(nM' , nN') 
%
%    nsgn ; nctx |- nM is nM' 
%    nsgn ; nctx |- nN is nN' 
%    --------------------------------------- :: 2
%    nsgn ; nctx |- nM nN is nM' nN' 
%
%    nsgn ; nctx |- nA is nA' 
%    nsgn ; nctx |- nM is nM' 
%    ------------------------------------------ :: 3
%    nsgn ; nctx |- \nA.nM is \nA'.nM' 
%
%
%
