%% term-level metavariables
%metavar mvar {{ tex ?_\mathcal{V} }}, mM {{ tex ?_M }}, mN {{ tex ?_M }} ::= 
%    {{ com  term-level meta-variable }} 
%    {{ coq nat}} {{ coq-equality }}
%    {{ ocaml string }} {{ lex alphanum}} {{ ocamllex VarAlphanum }}
%
%% type-level metavariables
%metavar mtvar {{ tex ?_\mathcal{B} }}, mA {{ tex ?_A }}, mB {{ tex ?_B }} ::=
%    {{ com  type-level meta-variable }} 
%    {{ coq nat}} {{ coq-equality }}
%    {{ ocaml string }} {{ lex alphanum}} {{ ocamllex VarAlphanum }}
%
%% kind-level metavariables, for technical reasons
%metavar mkvar {{ tex ?_K }}, mL {{ tex ?_L }} ::=
%    {{ com  kind-level meta-variable }} 
%    {{ coq nat}} {{ coq-equality }}
%    {{ ocaml string }} {{ lex alphanum}} {{ ocamllex VarAlphanum }}

embed
{{ ocaml
let eq_con x y = (String.compare x y) == 0
let eq_tcon x y = (String.compare x y) == 0
}}

% locally nameless metavariable
metavar lnvar {{ tex {?_{ln} } }}, mM {{ tex ?_M }} {{ocaml Logical variable}},
    mN {{ tex ?_M }}, mA {{ tex ?_A }}, mB {{ tex ?_B }}, mL {{ tex ?_L }},
    mG {{ tex ?_\Gamma }}
    ::= {{ com  nameless meta-variable }} 
        {{ coq nat }} {{ coq-equality }}
        {{ ocaml int }} {{ ocamllex 'M''_'(['0'-'9']+ as lnvarval) }}

metavar tvar {{ tex {?_{t} } }}, tM {{ tex ?_M^t }}, tA {{ tex ?_A^t }}, tL {{ tex ?_L^t }}
    ::= {{ com  technical meta-variable }} 
        {{ coq nat }} {{ coq-equality }}
        {{ ocaml int }} {{ ocamllex 'T''_'(['0'-'9']+ as tvarval) }}
