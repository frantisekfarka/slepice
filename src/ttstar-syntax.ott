embed 
{{ ocaml
    open Datatypes
}}

metavar
cIx {{tex I }}
    ::= {{com deBruijn indices carrier }}
        {{ coq nat }} {{ coq-equality }}
        {{ ocaml int }} {{ ocamllex ['0'-'9']+ }}

grammar
Ix {{tex I }}, ix {{tex \iota }} :: 'ix_' ::= {{com deBruijn indices }}
  {{ coq nat }}
  {{ ocaml int }}
  | zero                 :: M :: zero  
  {{ coq 0 }}
  {{ ocaml 0 }}
  | succ Ix              :: M :: succ
  {{ coq (S [[Ix]]) }}
  {{ ocaml (succ [[Ix]]) }}
  | cIx                  :: S :: ix
  {{ coq ([[cIx]]) }}
  {{ ocaml ([[cIx]]) }}


%grammar
%Ix {{tex I }}, ix {{tex \iota }} :: 'ix_' ::= {{com deBruijn indices }}
%  {{ coq nat }}
%  | zero                 ::   :: zero  
%  {{ coq 0 }}
%  | succ Ix              ::   :: succ
%  {{ coq (S [[Ix]]) }}
%  | < Ix >               :: S :: paren                        
%     {{ coq [[Ix]] }}
%     {{ ocaml ([[Ix]]) }}
%     {{ tex ([[Ix]]) }}

grammar
eTy {{ tex {\ttstar{T} } }},
eA {{ tex {\ttstar{A} } }}, eB {{ tex {\ttstar{B} } }} :: 'ety_' ::=
    {{ com extended types }}
  | tcon                 ::   :: tcon                {{ com type constant }}
  | Pi eTy1 . eTy2       ::   :: pi_intro            {{ com type of dependent functions }}
  | eTy ete              ::   :: pi_elim             {{ com application of a type former }}
  | ( eTy )              :: S :: paren                        
     {{ coq [[eTy]] }}
     {{ ocaml ([[eTy]]) }}
  | lnvar                ::   :: mvar                {{ com type level metavariables }}
  | tvar                 ::   :: tvar                {{ com type level metavariables - technical}}
  %| mtvar                ::   :: mtvar               {{ com type level metavariables }}
%  | shiftTy( eTy , ix )  :: M :: shift
%     {{ coq [[eTy]] }}
%     {{ tex [[eTy]] \uparrow^{[[ix]]} }}
%  | substTy( eTy , ix , eN )    :: M :: subst
%     {{ coq [[eTy]] [[eN]] [[ix]] }}
%     {{ tex [[eTy]] [ [[eN]] / [[ix]] ] }}

ete {{ tex {\ttstar{t} } }},
eM {{ tex {\ttstar{M} } }}, eN {{ tex {\ttstar{N} } }} :: 'ete_' ::=
    {{ com extended terms }}
  | con                  ::   :: con                 {{ com term constant }} 
  | ix                   ::   :: ix                  {{ com de Bruijn indices }} 
  | \ eTy . ete          ::   :: pi_intro            {{ com formation of $\Pi$ type }}
  | ete1 ete2            ::   :: pi_elim             {{ com application }}
  | ( ete )              :: S :: paren                        
     {{ coq [[ete]] }}
     {{ ocaml ([[ete]]) }}
  | lnvar                ::   :: mvar                {{ com term level metavariables }}
  | tvar                 ::   :: tvar                {{ com term level metavariables - technical }}
  %| mvar                 ::   :: mvar                {{ com term level metavariables }}
%  | shiftte( ete , ix )  :: M :: shift
%     {{ coq [[ete]] }}
%     {{ tex [[ete]] \uparrow^{[[ix]]} }}
%  | substte( ete , ix , eN )    :: M :: subst
%     {{ coq [[ete]] [[eN]] [[ix]] }}
%     {{ tex [[ete]] [ [[eN]] / [[ix]] ] }}

grammar
eK {{ tex {\ttstar{K} } }} , 
eL {{ tex {\ttstar{L} } }} :: 'ek_' ::= {{ com extended kinds }}
  | typeK                ::   :: type                {{ com kind of all types }} 
  | Pi eTy . eK          ::   :: pi_intro            {{ com kind of dependent functions }}
  | ( eK )               :: S :: paren                        
     {{ coq ([[eK]]) }}
     {{ ocaml ([[eK]]) }}
  | lnvar                ::   :: mvar                {{ com kind level metavariables }}
  | tvar                 ::   :: tvar                {{ com kind level metavariables - technical }}
  %| mkvar                ::   :: mkvar               {{ com kind level metavariables }}
%  | substK( eK , ix , eN )    :: M :: subst
%     {{ coq [[eK]] [[eN]] [[ix]] }}
%     {{ tex  [[eK]] [ [[eN]] / [[ix]] ] }}

% for parser
grammar
esgn {{tex \ttstar{Sig} }}, eS {{ tex \ttstar{\mathcal{S} } }} {{coq Sgn }} :: 'signaturestar_nl_' ::= {{ com Signature }}
    {{ coq list (con*eTy+tcon*eK) }}
    {{ ocaml ((con * eTy , tcon*eK) sum)  list }}
  | empty                ::   :: empty               {{ com empty signature }}
     {{ coq nil }}
  | esgn , con : eTy       ::   :: con
     {{ coq (cons (inl([[con]],[[eTy]])) [[esgn]]) }}
  | esgn , tcon : eK       ::   :: tcon
     {{ coq (cons (inr([[tcon]],[[eK]])) [[esgn]]) }}

embed
{{ ocaml
let ctxvar xy = match xy with
    | (x,y) -> y :: x
}}

grammar
ectx {{tex {\ttstar{Ctx} } }}, eG {{ tex {\ttstar{\Gamma} } }} :: 'contextstar_nl_' ::= {{ com Extended Context }}
    {{ coq list (eTy) }}
    {{ ocaml eTy list }}
  | empty                ::   :: empty              {{ com empty context }}
     {{ coq nil }}
     {{ ocaml [] }}
  | ectx , eTy             ::   :: ctxvar
     {{ coq (cons [[eTy]] [[ectx]]) }}
     {{ ocaml ([[eTy]] :: [[ectx]]) }}
%  | csctx( nctx )           :: M :: cshifting
%     {{ tex \overleftarrow{ [[enctx]] } }} 
%     {{ coq ??TODO }}
%  | cuctx( enctx )           :: M :: cunshifting
%     {{ tex \overrightarrow{ [[enctx]] }  }} 
%     {{ coq ??TODO }}

