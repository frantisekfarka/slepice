%%
%% needs
%%    fodtt-syntax.ott
%%    fodtt-flas_{n,both}.ott
%%

%defns
%Jfresh:: 'f_' ::=
%
%  defn
%  fresh( Ix ; Ix' ; Ix'' ) :: :: fresh :: '' 
%    {{tex _{[[Ix]]}\text{fresh}_{[[Ix'']]} [[Ix']] }} by
%
%    -----------------------------------  :: var
%    fresh( Ix ; succ Ix ; succ succ Ix)

embed
{{ coq
Definition fresh (v1 v2 v3 : lnvar) : Prop
  := match v2 with
       | (S v1) => match v3 with
                    | (S v2) => True
                    | _ => False
                  end
       | _ => False
     end.
}}

defns
Jrefin :: 'r_' ::=

%  defn
%  sgn ; ectx ; eK |- TTGoal ; kindS :: :: goalkind_nl :: 'g_K_' 
%    {{tex [[sgn]] ; [[ectx]] ; [[eK]] \vdash ( [[TTGoal]] \mid [[kindS]] ) }} by
%
%    ---------------------------------------  :: type
%    S ; eG ; typeK |- true ; kindS 
%
%    S ; eG ; eA |- Go1 ; typeK
%    S ; eG , eA ; eL |- Go2 ; kindS
%    ----------------------------------------------- :: pi_intro
%    S ; eG ; Pi eA . eL |- Go1 & Go2 ; kindS
%
%    %-------------------------------------------------- :: mvar
%    %S ; eG ; mL |- kind( mL , eG ) ; kindS

  defn
  sgn ; ectx ; eTy ; tvar |- TTGoal ; eK ; tvar' :: :: goaltype ::'g_Ty_' 
    {{tex [[sgn]] ; [[ectx]] ; [[eTy]] ~{_\tec{[[tvar]]} }\vdash_\tec{[[tvar']]} ( [[TTGoal]] \mid [[eK]] ) }} by

    a : L in S
    --------------------------------  :: tcon
    S ; eG ; a ; tvar |- true ; L ; tvar

    S ; eG ; eA ; tvar1  |- Go1 ; eL1 ; tvar2
    S ; eG , eA ; eB ; tvar2 |- Go2 ; eL2 ; tvar3
    --------------------------------------------------------------------------------------------------- :: pi_intro
    S ; eG ; Pi eA . eB ; tvar1 |- ((Go1 & Go2) & eq_K eL1 typeK eG) & eq_K eL2 typeK eG ; typeK ; tvar3

    S ; eG ; eA ; tvar1 |- Go1 ; eL ; tvar2
    S ; eG ; eM ; tvar2 |- Go2 ; eB ; tvar3
    fresh tvar3 tL tvar4
    fresh tvar4 tL' tvar5
    ----------------------------------------------------------------- :: pi_elim
    S ; eG ; eA eM ; tvar1 |- ((Go1 & Go2) & eq_K Pi eB . eL tL' eG ) & substK tL' eM tL ; tL ; tvar5

   
    fresh tvar1 tL tvar2
    ------------------------------------------------------------ :: mvar
    S ; eG ; mA ; tvar1 |- typeP mA tL eG ; tL ; tvar2

    fresh tvar1 tL tvar2
    ------------------------------------------------------------ :: tvar
    S ; eG ; tA ; tvar1 |- typeP tA tL eG ; tL ; tvar2

  defn
  sgn ; ectx ; ete ; tvar |- TTGoal ; eTy ; tvar' :: :: goalterm ::'g_te_' 
  {{tex [[sgn]] ; [[ectx]] ; [[ete]] {_\tec{[[tvar]] } }\vdash_\tec{[[tvar']]} ( [[TTGoal]] \mid [[eTy]] ) }} by

    c : A in S
    ---------------------------------------  :: con
    S ; eG ; c ; tvar1 |- true ; A ; tvar1

    fresh tvar1 tA tvar2
    ---------------------------------------------------  :: var_nil
    S ; eG, eA ; zero ; tvar1 |- shiftTy eA zero tA ; tA ; tvar2

    S ; eG ; ix ; tvar1 |- Go ; eA ; tvar2
    fresh tvar2 tA tvar3
    ------------------------------------------------------  :: var_cons
    S ; eG,eB ; succ ix ; tvar1 |- Go & shiftTy eA zero tA ; tA ; tvar3

    S ; eG ; eA ; tvar1 |- Go1 ; eL ; tvar2
    S ; eG , eA ; eM ; tvar2 |- Go2 ; eB ; tvar3
    ----------------------------------------------------------------- :: pi_intro
    S ; eG ; \eA.eM ; tvar1 |- (Go1 & Go2) & eq_K eL typeK eG; Pi eA . eB ; tvar3

    S ; eG ; eM ; tvar1 |- Go1 ; eA ; tvar2
    S ; eG ; eN ; tvar2 |- Go2 ; eA1 ; tvar3
    fresh tvar3 tA tvar4
    fresh tvar4 tA' tvar5
    ---------------------------------------------------------------------------------- :: pi_elim
    S ; eG ; eM eN ; tvar1 |- ((Go1 & Go2) & eq_Ty eA Pi eA1 . tA' eG ) & substTy tA' eN tA ; tA ; tvar5
    
    fresh tvar1 tA tvar2
    -------------------------------------------- :: mvar
    S ; eG ; mN ; tvar1 |- mN : termP mN tA eG ; tA ; tvar2

    fresh tvar1 tA tvar2
    -------------------------------------------------- :: tvar
    S ; eG ; tM ; tvar1 |- termP tM tA eG ; tA ; tvar2

defns
JrefinProgEmpty :: 'r_' ::=

defn 
  tvar |-e TTProg ; tvar' ::  :: pe :: 'pe_' 
    {{tex _\tec{[[tvar]]} \vdash_{P_\text{empty} } {}_\tec{[[tvar']]} [[TTProg]] }} by

    ------------------------------------------- :: eq_K
    tvar1 |-e empty , eq_K typeK typeK empty . ; tvar2 

defns
JrefinProg :: 'r_' ::=

defn 
  sgn ; tvar |- TTProg ; tvar' ::  :: prog :: 'p_sgn_' 
    {{tex [[sgn]] _\tec{[[tvar]]} \vdash_{Prog} {}_\tec{[[tvar']]} [[TTProg]] }} by


% todo
    
    tvar |-e TTP ; tvar'
    ------------------------------ :: empty
    empty ; tvar |- TTP ; tvar'

    S ; tvar1 |- TTP ; tvar2
    fresh tvar2 tM tvar3
    ------------------------------------------------------------- :: con
    S , c : A ; tvar1 |- TTP , termP c A empty . , shiftte c zero c . , substte c tM c .  ; tvar3

    S ; tvar1 |- TTP ; tvar2
    fresh tvar2 tM tvar3
    ------------------------------------------------------------- :: tcon
    S , a : L ; tvar1 |- TTP , typeP a L empty . , shiftTy a zero a . , substTy a tM a . ; tvar3

